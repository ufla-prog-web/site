{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem vindo a P\u00e1gina de Programa\u00e7\u00e3o Web","text":"<p>P\u00e1gina da Disciplina - GAC116 - Programa\u00e7\u00e3o Web ofertada na UFLA.</p> <p>A seguir tem-se a documenta\u00e7\u00e3o de algumas aulas da disciplina.</p> <ul> <li>Aula Django 01</li> <li>Aula Django 02</li> <li>Aula Django 03</li> </ul>"},{"location":"aula-django-01/","title":"Aula Django 01 - Vis\u00e3o Geral do Django","text":"<p>Este projeto mostra uma vis\u00e3o geral do framework Python Django. E foi baseado no conte\u00fado ensinado na aula de programa\u00e7\u00e3o web utilizando como base a documenta\u00e7\u00e3o do django e tamb\u00e9m o curso de django da w3schools.</p>"},{"location":"aula-django-01/#linguagens-utilizadas","title":"Linguagens Utilizadas","text":"<ul> <li>Python - link</li> <li>HTML - link</li> </ul>"},{"location":"aula-django-01/#framework-utilizados","title":"Framework Utilizados","text":"<ul> <li>Django - link</li> </ul>"},{"location":"aula-django-01/#ferramentas-utilizadas","title":"Ferramentas Utilizadas","text":"<ul> <li>Visual Studio Code - link</li> <li>SQLite Online - link</li> <li>Pip - link</li> <li>VirtualEnv - link</li> </ul>"},{"location":"aula-django-01/#comandos-utilizados-na-criacao-deste-projeto","title":"Comandos utilizados na cria\u00e7\u00e3o deste projeto","text":""},{"location":"aula-django-01/#baixando-o-repositorio","title":"Baixando o Reposit\u00f3rio","text":"<p>Inicilamente, baixe o reposit\u00f3rio do link clicando em <code>Code</code> e <code>Download ZIP</code>.</p>"},{"location":"aula-django-01/#instalacao-do-python","title":"Instala\u00e7\u00e3o do Python","text":"<p>Se necess\u00e1rio, instale o Python (testado na vers\u00e3o 3.10.12) link.</p> <p>Verifique a vers\u00e3o instalada do Python (para ter certeza que tudo ocorreu bem):</p> <pre><code>$ python3 --version\n</code></pre>"},{"location":"aula-django-01/#instalacao-do-pip","title":"Instala\u00e7\u00e3o do Pip","text":"<p>Se necess\u00e1rio, instale o pip (testado na vers\u00e3o 23.2.1):</p> <pre><code>$ sudo apt install python3-pip\n</code></pre> <p>Verifique a vers\u00e3o instalada do pip (para ter certeza que tudo ocorreu bem):</p> <pre><code>$ pip3 --version\n</code></pre>"},{"location":"aula-django-01/#instalacao-do-virtualenv","title":"Instala\u00e7\u00e3o do VirtualEnv","text":"<p>Se necess\u00e1rio, instale o virtualenv (testado na vers\u00e3o 20.24.1):</p> <pre><code>$ pip3 install virtualenv\n</code></pre> <p>Verifique a vers\u00e3o instalada do virtualenv (para ter certeza que tudo ocorreu bem):</p> <pre><code>$ virtualenv --version\n</code></pre>"},{"location":"aula-django-01/#criacao-do-ambiente-virtual","title":"Cria\u00e7\u00e3o do Ambiente Virtual","text":"<p>Crie o ambiente virtual para isolar as instala\u00e7\u00f5es Python:</p> <pre><code>$ virtualenv venv\n</code></pre> <p>OBS: no comando acima o nome <code>venv</code> \u00e9 o nome que escolhemos para o nosso ambiente virtual (isso pode ser alterado).</p> <p>Ativei o ambiente virtual para fazer as instala\u00e7\u00f5es de forma isolada:</p> <p>Sistema Operacional: Unix/Mac OS:</p> <pre><code>$ source venv/bin/activate\n</code></pre> <p>Sistema Operacional: Windows</p> <pre><code>$ venv\\Scripts\\activate.bat\n</code></pre> <p>Quando desejar sair do ambiente virtual, basta digitar:</p> <pre><code>(venv) ... $ deactivate\n</code></pre>"},{"location":"aula-django-01/#instalacao-do-django","title":"Instala\u00e7\u00e3o do Django","text":"<p>Instale o django dentro do ambiente virtual criado (testado na vers\u00e3o 4.2.5):</p> <pre><code>(venv) ... $ pip3 install django\n</code></pre> <p>Verifique a vers\u00e3o instalada do django (para ter certeza que tudo ocorreu bem):</p> <pre><code>(venv) ... $ django-admin --version\n</code></pre>"},{"location":"aula-django-01/#criacao-do-projeto-django","title":"Cria\u00e7\u00e3o do Projeto Django","text":"<p>Crie um projeto em django:</p> <pre><code>(venv) ... $ django-admin startproject mysite .\n</code></pre> <p>OBS: O ponto no comando acima informa ao Django para n\u00e3o criar uma pasta com nome <code>mysite</code> dentro de uma pasta <code>mysite</code>. Isso evita ter que ficar navegando entre pastas.</p>"},{"location":"aula-django-01/#executando-o-projeto","title":"Executando o Projeto","text":"<p>Inicie a execu\u00e7\u00e3o do projeto django criado:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Acesse atrav\u00e9s do navegdor web a p\u00e1gina http://127.0.0.1:8000/. Uma p\u00e1gina padr\u00e3o do django deve aparecer.</p>"},{"location":"aula-django-01/#criando-um-aplicativo","title":"Criando um Aplicativo","text":"<p>Execute o comando abaixo para criar um aplicativo chamado <code>myapp</code> dentro do projeto <code>mysite</code>:</p> <pre><code>(venv) ... $ python3 manage.py startapp myapp\n</code></pre> <p>O comando abaixo tamb\u00e9m faz a mesma coisa:</p> <pre><code>(venv) ... $ django-admin startapp myapp\n</code></pre>"},{"location":"aula-django-01/#criando-a-primeira-view-no-django","title":"Criando a Primeira View no Django","text":"<p>Edite o arquivo de <code>views.py</code> (na pasta <code>myapp</code>) e coloque o seguinte conte\u00fado:</p> <pre><code>from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef teste(request):\n    return HttpResponse(\"Ol\u00e1 Mundo!\")\n</code></pre> <p>Em seguida, crie um arquivo nomeado <code>urls.py</code> na mesma pasta do arquivo <code>views.py</code> e digite este c\u00f3digo nele:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('teste/', views.teste, name='teste'),\n]\n</code></pre> <p>Existe um arquivo chamado <code>urls.py</code> na pasta <code>mysite</code>, abra esse arquivo e coloque o seguinte conte\u00fado nesse arquivo.</p> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('myapp.urls')),\n    path('admin/', admin.site.urls),\n]\n</code></pre> <p>Em seguida, execute o projeto django (veja se est\u00e1 tudo funcionando):</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>OBS: deve aparecer uma mensagem de erro (Page not found) na p\u00e1gina http://127.0.0.1:8000.</p> <p>OBS: assim, acesse a URL: http://127.0.0.1:8000/teste/.</p>"},{"location":"aula-django-01/#criando-o-primeiro-template-no-django","title":"Criando o Primeiro Template no Django","text":"<p>Crie uma pasta <code>templates</code> dentro da pasta <code>myapp</code> e crie um arquivo HTML chamado <code>paginateste.html</code>.</p> <p>Abra o arquivo HTML e insira o seguinte:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Ol\u00e1 Mundo!&lt;/h1&gt;\n\n&lt;p&gt;Bem-vindo ao meu primeiro projeto Django!&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Agora \u00e9 necess\u00e1rio modificar a visualiza\u00e7\u00e3o. Abra o arquivo <code>views.py</code> e substitua o m\u00e9todo de visualiza\u00e7\u00e3o <code>teste</code> por este:</p> <pre><code>from django.http import HttpResponse\nfrom django.template import loader\n\ndef teste(request):\n    template = loader.get_template('paginateste.html')\n    return HttpResponse(template.render())\n</code></pre> <p>Para poder trabalhar com coisas mais complicadas do que \"Hello World!\", temos que dizer ao Django que um novo aplicativo foi criado. Isso \u00e9 feito no arquivo <code>settings.py</code> da pasta <code>mysite</code>. Procure a lista <code>INSTALLED_APPS[]</code> e adicione o aplicativo <code>myapp</code> que foi criado assim:</p> <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',  # inclua o app criado aqui\n]\n</code></pre> <p>Em seguida, execute este comando:</p> <pre><code>(venv) ... $ python3 manage.py migrate\n</code></pre> <p>Em seguida, execute o projeto django (veja se est\u00e1 tudo funcionando):</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Em seguida, acesse a URL http://127.0.0.1:8000/teste/.</p>"},{"location":"aula-django-01/#passando-parametros-para-o-template-do-django","title":"Passando Par\u00e2metros para o Template do Django","text":"<p>Agora, iremos ver como podemos passar alguns par\u00e2metros do Python para o template HTML utilizando tags do Django (atrav\u00e9s da biblioteca Jinja).</p> <p>Em seguida, edite o arquivo <code>views.py</code> na pasta <code>biblioteca</code> e coloque o seguinte conte\u00fado:</p> <pre><code>from django.http import HttpResponse\nfrom django.template import loader\n\ndef teste(request):\n    template = loader.get_template('paginateste.html')\n    context = {\n        \"nome\": \"Jos\u00e9 Silva\",\n        \"idade\": 30,\n        \"email\": \"jose.silva@email.com\",\n        \"telefone\": \"3333-1234\"\n    }\n    return HttpResponse(template.render(context, request))\n</code></pre> <p>Em seguida, edite o arquivo HTML com nome <code>paginateste.html</code> na pasta <code>templates</code> com o seguinte conte\u00fado:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Django: Tags de Templates&lt;/h1&gt;\n\n&lt;p&gt;Neste exemplos utilizamos as tags de templates do Django (Jinja)&lt;/p&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;&lt;b&gt;Nome:&lt;/b&gt; {{ nome }} &lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;Idade:&lt;/b&gt; {{ idade }} &lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;E-mail:&lt;/b&gt; {{ email }} &lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;Telefone:&lt;/b&gt; {{ telefone }} &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Em seguida, execute o projeto django:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Em seguida, acesse a URL http://127.0.0.1:8000/teste/.</p>"},{"location":"aula-django-01/#criando-nosso-primeiro-modelo","title":"Criando nosso Primeiro Modelo","text":"<p>At\u00e9 esse momento fizemos a nossa aplica\u00e7\u00e3o web com interface, com URLs e algum processamento, mas n\u00e3o trabalhamos com Banco de Dados. Os dados estavam inseridos diretamente no c\u00f3digo.</p> <p>Iremos agora criar o nosso primeiro modelo um Livro no Banco de Dados SQLite dispon\u00edvel no Django. No Django, os dados s\u00e3o criados em objetos, chamados Modelos, e na verdade s\u00e3o tabelas em um banco de dados.</p> <p>Primeiramente, iremos criar uma classe chamada <code>Livro</code>. Para isso abra o arquivo <code>models.py</code> na pasta <code>myapp</code> e digite o seguinte conte\u00fado:</p> <pre><code>from django.db import models\n\nclass Livro(models.Model):\n    nome = models.CharField(max_length=255)\n    autor = models.CharField(max_length=255)\n    ano = models.IntegerField()\n</code></pre> <p>O c\u00f3digo acima ir\u00e1 criar uma Tabela chamada Livro no BD SQLite. Os campos <code>nome</code> e <code>autor</code> s\u00e3o campos de texto e est\u00e3o configurados para ter no m\u00e1ximo 255 caracteres. O campo <code>ano</code> \u00e9 um campo num\u00e9rico inteiro.</p> <p>OBS: Quando criamos o projeto Django, obtivemos um banco de dados SQLite vazio. Ele estava na raiz da pasta aula-django-01 e possui o nome de arquivo db.sqlite3. Por padr\u00e3o, todos os modelos criados no projeto Django ser\u00e3o criados como tabelas neste banco de dados.</p> <p>Em seguida, execute o c\u00f3digo abaixo para que seja criado a tabela Livro no banco de dados de fato:</p> <pre><code>(venv) ... $ python3 manage.py makemigrations myapp\n</code></pre> <p>O que resultar\u00e1 nesta sa\u00edda:</p> <pre><code>Migrations for 'myapp':\n  myapp/migrations/0001_initial.py\n    - Create model Livro\n</code></pre> <p>O Django cria um arquivo descrevendo as altera\u00e7\u00f5es e armazena o arquivo na pasta <code>/myapp/migrations/</code> com nome <code>0001_initial.py</code>. Abra esse arquivo para analisar o conte\u00fado. Observe que o Django insere um campo <code>id</code> para suas tabelas, que \u00e9 um n\u00famero auto incrementado.</p> <p>A tabela ainda n\u00e3o foi criada, voc\u00ea ter\u00e1 que executar mais um comando, ent\u00e3o o Django criar\u00e1 e executar\u00e1 uma instru\u00e7\u00e3o SQL, baseada no conte\u00fado do novo arquivo da pasta <code>/myapp/migrations/</code>.</p> <p>Execute o comando de migra\u00e7\u00e3o:</p> <pre><code>(venv) ... $ python3 manage.py migrate\n</code></pre> <p>O que resultar\u00e1 nesta sa\u00edda:</p> <pre><code>Operations to perform:\n  Apply all migrations: admin, auth, contenttypes, myapp, sessions\nRunning migrations:\n  Applying myapp.0001_initial... OK\n</code></pre>"},{"location":"aula-django-01/#ambiente-administrativo-do-django","title":"Ambiente Administrativo do Django","text":"<p>O Django Admin \u00e9 uma ferramenta \u00f3tima do Django, na verdade \u00e9 uma interface de usu\u00e1rio CRUD (Criar, Ler, Atualizar, Excluir) para todos os seus modelos!</p> <p>Para entrar na interface do usu\u00e1rio administrativo, inicie o servidor com este comando:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Na janela do navegador, digite na barra de endere\u00e7o 127.0.0.1:8000/admin/</p> <p>A raz\u00e3o pela qual esta URL vai para a p\u00e1gina de login do administrador do Django pode ser encontrada no arquivo <code>urls.py</code> do seu projeto:</p> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('myapp.urls')),\n    path('admin/', admin.site.urls),\n]\n</code></pre> <p>A lista <code>urlpatterns[]</code> recebe solicita\u00e7\u00f5es na rota <code>admin/</code> e as envia para <code>admin.site.urls</code>, que faz parte de um aplicativo integrado que vem com o Django e cont\u00e9m muitas funcionalidades e interfaces de usu\u00e1rio, sendo uma delas a interface de usu\u00e1rio de login.</p>"},{"location":"aula-django-01/#criando-um-usuario-no-django","title":"Criando um Usu\u00e1rio no Django","text":"<p>Para poder fazer login no ambiente administrativo do Django, precisamos criar um usu\u00e1rio. Isso \u00e9 feito digitando este comando:</p> <pre><code>(venv) ... $ python3 manage.py createsuperuser\n</code></pre> <p>O que dar\u00e1 um prompt como esse:</p> <pre><code>Username: admin\nEmail address: \nPassword: \nPassword (again): \nThe password is too similar to the username.\nThis password is too short. It must contain at least 8 characters.\nThis password is too common.\nBypass password validation and create user anyway? [y/N]: y\n</code></pre> <p>OBS: Aqui voc\u00ea deve inserir: nome de usu\u00e1rio, endere\u00e7o de e-mail (voc\u00ea pode simplesmente deixar em branco ou escolher um endere\u00e7o de e-mail falso) e senha. Em meu caso coloquei usu\u00e1rio <code>admin</code> email em branco e senha <code>admin</code>.</p> <p>Minha senha n\u00e3o atendeu aos crit\u00e9rios, mas este \u00e9 um ambiente de teste, e opto por criar usu\u00e1rio mesmo assim, digitando <code>y</code> gerando assim a sa\u00edda:</p> <pre><code>Superuser created successfully.\n</code></pre> <p>Agora reinicie o servidor:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Na janela do navegador, digite na barra de endere\u00e7o 127.0.0.1:8000/admin/</p> <p>Preencha o formul\u00e1rio com o nome de usu\u00e1rio e senha corretos (<code>admin</code> e <code>admin</code>):</p> <p>Na tela aberta voc\u00ea pode criar, ler, atualizar e excluir grupos e usu\u00e1rios, mas onde est\u00e1 o modelo de Livro?</p> <p>O modelo Livro est\u00e1 faltando, como deveria estar. Voc\u00ea tem que informar ao Django quais modelos devem estar vis\u00edveis na interface administrativa.</p> <p>Para incluir o modelo Livro na interface administrativa, temos que dizer ao Django que este modelo deve estar vis\u00edvel na interface administrativa.</p> <p>Isso \u00e9 feito em um arquivo chamado <code>admin.py</code>, e est\u00e1 localizado na pasta do seu aplicativo, que no nosso caso \u00e9 a pasta <code>myapp</code>.</p> <p>Abra-o, o mesmo deve estar assim:</p> <pre><code>from django.contrib import admin\n\n# Register your models here.\n</code></pre> <p>Insira algumas linhas aqui para tornar o modelo Livro vis\u00edvel na p\u00e1gina de administra\u00e7\u00e3o:</p> <pre><code>from django.contrib import admin\nfrom .models import Livro\n\nadmin.site.register(Livro)\n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/admin/</p> <p>Clique em Livros fa\u00e7a a inser\u00e7\u00e3o de alguns livros no modelo criado.</p>"},{"location":"aula-django-01/#visualizando-o-modelo-de-dados","title":"Visualizando o Modelo de Dados","text":"<p>Existem diversas ferramentas que podem ser utilizadas para ver o banco de dados do modelo criado. Uma dessas ferramentas \u00e9 o site SQLite Online. Acesse esse site e carregue o banco de dados chamado <code>db.sqlite3</code> localizado na raiz do projeto.</p> <p>Execute o comando abaixo nessa ferramenta para listar os livros que voc\u00ea cadastrou utilizando o ambiente administrativo.</p> <pre><code>SELECT * FROM myapp_livro;\n</code></pre>"},{"location":"aula-django-01/#fim-do-tutorial","title":"Fim do Tutorial","text":"<p>Chegamos ao final deste tutorial. \u00c9 importante entender o que faz cada um dos comandos acima explicados. Caso tenha d\u00favidas acesse o site da documenta\u00e7\u00e3o do Django e tamb\u00e9m o curso de Django da w3schools nos links abaixo.</p> <ul> <li>Documenta\u00e7\u00e3o Django</li> <li>Curso Django w3schools</li> </ul>"},{"location":"aula-django-02/","title":"Aula Djando 02 - Sistema para Portal Biblioteca","text":"<p>Aula Djando 02. Projeto utilizando o Django para ser desenvolvido na Aula de GAC116 - Programa\u00e7\u00e3o Web.</p> <p>O objetivo desse projeto \u00e9 criar um sistema para gest\u00e3o de biblioteca.</p> <p>Este tutorial foi elaborado baseado no tutorial dispon\u00edvel no curso de django da w3schools e tamb\u00e9m baseado na documenta\u00e7\u00e3o oficial do django.</p>"},{"location":"aula-django-02/#linguagens-utilizadas","title":"Linguagens Utilizadas","text":"<ul> <li>Python - link</li> <li>JavaScript - link</li> <li>HTML - link</li> <li>CSS - link</li> </ul>"},{"location":"aula-django-02/#framework-utilizados","title":"Framework Utilizados","text":"<ul> <li>Django - link</li> <li>Bootstrap - link</li> <li>Chart.js - link</li> </ul>"},{"location":"aula-django-02/#ferramentas-utilizadas","title":"Ferramentas Utilizadas","text":"<ul> <li>Pip - link</li> <li>VirtualEnv - link</li> <li>Visual Studio Code - link</li> <li>SQLite Online - link</li> <li>DB Browser for SQLite - link</li> </ul>"},{"location":"aula-django-02/#arquitetura-web","title":"Arquitetura Web","text":""},{"location":"aula-django-02/#arquitetura-geral-das-aplicacao-web","title":"Arquitetura Geral das Aplica\u00e7\u00e3o Web","text":"<p>Fonte: https://blog.grancursosonline.com.br/arquitetura-em-tres-camadas-para-aplicacoes-web/</p>"},{"location":"aula-django-02/#arquitetura-django","title":"Arquitetura Django","text":""},{"location":"aula-django-02/#arquitetura-mvt-geral","title":"Arquitetura MVT - Geral","text":""},{"location":"aula-django-02/#arquitetura-mvt-requisicao","title":"Arquitetura MVT - Requisi\u00e7\u00e3o","text":""},{"location":"aula-django-02/#arquitetura-mvt-detalhes","title":"Arquitetura MVT - Detalhes","text":""},{"location":"aula-django-02/#objetivo-da-aula","title":"Objetivo da Aula","text":"<p>A anima\u00e7\u00e3o abaixo mostra de forma visual o resultado esperado nesta aula.</p> <p></p>"},{"location":"aula-django-02/#comandos-utilizados-na-criacao-deste-projeto","title":"Comandos utilizados na cria\u00e7\u00e3o deste projeto","text":""},{"location":"aula-django-02/#clonando-o-repositorio","title":"Clonando o Reposit\u00f3rio","text":"<p>Inicialmente, clone o reposit\u00f3rio da seguinte forma:</p> <pre><code>git clone https://github.com/ufla-prog-web/aula-django-02.git\n</code></pre>"},{"location":"aula-django-02/#baixando-o-repositorio","title":"Baixando o Reposit\u00f3rio","text":"<p>Caso deseje ao inv\u00eas de clonar o reposit\u00f3rio (m\u00e9todo acima), baixe o reposit\u00f3rio do link clicando em <code>Code</code> e <code>Download ZIP</code>.</p>"},{"location":"aula-django-02/#criacao-da-pasta-do-projeto","title":"Cria\u00e7\u00e3o da Pasta do Projeto","text":"<p>Em seguida, crie a pasta do projeto (<code>portal_biblioteca</code>) dentro da pasta baixada do github (<code>aula-django-02</code>):</p> <pre><code>mkdir portal_biblioteca\ncd portal_biblioteca/\n</code></pre>"},{"location":"aula-django-02/#instalacao-do-python","title":"Instala\u00e7\u00e3o do Python","text":"<p>Se necess\u00e1rio, instale o Python (testado na vers\u00e3o 3.10.12) link.</p> <p>Verifique a vers\u00e3o instalada do Python (para ter certeza que tudo ocorreu bem):</p> <pre><code>python3 --version\n</code></pre>"},{"location":"aula-django-02/#instalacao-do-pip","title":"Instala\u00e7\u00e3o do Pip","text":"<p>Se necess\u00e1rio, instale o pip (testado na vers\u00e3o 23.2.1):</p> <pre><code>sudo apt install python3-pip\n</code></pre> <p>Verifique a vers\u00e3o instalada do pip (para ter certeza que tudo ocorreu bem):</p> <pre><code>pip3 --version\n</code></pre>"},{"location":"aula-django-02/#instalacao-do-virtualenv","title":"Instala\u00e7\u00e3o do VirtualEnv","text":"<p>Se necess\u00e1rio, instale o virtualenv (testado na vers\u00e3o 20.24.1):</p> <pre><code>pip3 install virtualenv\n</code></pre> <p>ou</p> <pre><code>python3 -m pip install --user virtualenv\n</code></pre> <p>Verifique a vers\u00e3o instalada do virtualenv (para ter certeza que tudo ocorreu bem):</p> <pre><code>virtualenv --version\n</code></pre> <p>ou</p> <pre><code>python3 -m virtualenv --version\n</code></pre>"},{"location":"aula-django-02/#criacao-do-ambiente-virtual","title":"Cria\u00e7\u00e3o do Ambiente Virtual","text":"<p>Crie o ambiente virtual para isolar as instala\u00e7\u00f5es Python:</p> <pre><code>python3 -m virtualenv venv\n</code></pre> <p>ou</p> <pre><code>virtualenv venv\n</code></pre> <p>Ativei o ambiente virtual para fazer as instala\u00e7\u00f5es de forma isolada:</p> <p>Sistema Operacional: Unix/Mac OS:</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Sistema Operacional: Windows</p> <pre><code>venv\\Scripts\\activate.bat\n</code></pre> <p>Quando desejar sair do ambiente virtual, basta digitar:</p> <pre><code>(venv) ... $ deactivate\n</code></pre>"},{"location":"aula-django-02/#instalacao-do-django","title":"Instala\u00e7\u00e3o do Django","text":"<p>Instale o django dentro do ambiente virtual criado (testado na vers\u00e3o 4.2.5):</p> <pre><code>(venv) ... $ pip3 install django\n</code></pre> <p>ou</p> <pre><code>(venv) ... $ python -m pip install Django\n</code></pre> <p>Verifique a vers\u00e3o instalada do django (para ter certeza que tudo ocorreu bem):</p> <pre><code>(venv) ... $ django-admin --version\n</code></pre> <p>ou</p> <pre><code>(venv) ... $ python3 -m django --version\n</code></pre> <p>OBS: Caso o terminal n\u00e3o encontre o django-admin, execute o seguinte comando abaixo (utilizado geralmente quando n\u00e3o se utiliza o VirtualEnv no laborat\u00f3rio DCC07):</p> <pre><code>export PATH=$PATH:~/.local/bin\n</code></pre>"},{"location":"aula-django-02/#abrindo-o-visual-studio-code","title":"Abrindo o Visual Studio Code","text":"<p>Abra a IDE Visual Studio Code na pasta aula-django-02.</p> <p>Dica: Abra o arquivo <code>README.md</code> e clique em <code>Open Preview to the Side</code> para facilitar a constru\u00e7\u00e3o da aplica\u00e7\u00e3o.</p> <p>Dica: Abra um terminal utilizando a IDE clicando em <code>Terminal</code> e <code>New Terminal</code>. Navegue at\u00e9 a pasta <code>portal_biblioteca</code>.</p>"},{"location":"aula-django-02/#criacao-do-projeto-django","title":"Cria\u00e7\u00e3o do Projeto Django","text":"<p>Crie um projeto em django:</p> <pre><code>(venv) ... $ django-admin startproject portal_biblioteca .\n</code></pre>"},{"location":"aula-django-02/#executando-o-projeto","title":"Executando o Projeto","text":"<p>Inicie a execu\u00e7\u00e3o do projeto django criado:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Explica\u00e7\u00e3o: O comando acima \u00e9 usado no Django para iniciar um servidor de desenvolvimento local. Ele \u00e9 uma parte fundamental do processo de desenvolvimento web com o Django, pois permite que voc\u00ea execute e teste sua aplica\u00e7\u00e3o web em um ambiente de desenvolvimento local antes de implant\u00e1-la em um servidor web de produ\u00e7\u00e3o. Ele inicia um servidor HTTP embutido no Django que pode lidar com solicita\u00e7\u00f5es HTTP. Por padr\u00e3o, o servidor de desenvolvimento escuta na porta 8000, mas voc\u00ea pode especificar uma porta diferente como argumento opcional, por exemplo, <code>python3 manage.py runserver 8081</code>.</p> <p>Acesse atrav\u00e9s do navegdor web a p\u00e1gina http://127.0.0.1:8000/. Uma p\u00e1gina padr\u00e3o do django deve aparecer.</p>"},{"location":"aula-django-02/#criando-um-aplicativo","title":"Criando um Aplicativo","text":"<p>Execute o comando abaixo para criar um aplicativo chamado <code>biblioteca</code> dentro do projeto <code>portal_biblioteca</code>:</p> <pre><code>(venv) ... $ python3 manage.py startapp biblioteca\n</code></pre> <p>ou</p> <pre><code>(venv) ... $ django-admin startapp biblioteca\n</code></pre>"},{"location":"aula-django-02/#criando-a-primeira-view-no-django","title":"Criando a primeira View no Django","text":"<p>Edite o arquivo de <code>views.py</code> (na pasta <code>biblioteca</code>) e coloque o seguinte conte\u00fado:</p> <pre><code>from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef principal(request):\n    return HttpResponse(\"Ol\u00e1 Mundo! - Portal Biblioteca\")\n</code></pre> <p>Em seguida, crie um arquivo nomeado <code>urls.py</code> na mesma pasta do arquivo <code>views.py</code> e digite este c\u00f3digo nele:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.principal, name='principal'),\n]\n</code></pre> <p>Existe um arquivo chamado <code>urls.py</code> na pasta <code>portal_biblioteca</code>, abra esse arquivo e coloque o seguinte conte\u00fado nesse arquivo.</p> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('biblioteca.urls')),\n    path('admin/', admin.site.urls),\n]\n</code></pre> <p>Em seguida, execute o projeto django (veja se est\u00e1 tudo funcionando):</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>OBS: Acesse a URL http://127.0.0.1:8000.</p>"},{"location":"aula-django-02/#criando-o-primeiro-template-no-django","title":"Criando o primeiro Template no Django","text":"<p>Crie uma pasta <code>templates</code> dentro da pasta <code>biblioteca</code> e crie um arquivo HTML chamado <code>principal.html</code>.</p> <p>Abra o arquivo HTML e insira o seguinte:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Ol\u00e1 Mundo!&lt;/h1&gt;\n\n&lt;p&gt;Bem-vindo ao meu primeiro projeto Django!&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Agora \u00e9 necess\u00e1rio modificar a visualiza\u00e7\u00e3o. Abra o arquivo <code>views.py</code> e substitua o m\u00e9todo de visualiza\u00e7\u00e3o <code>principal</code> por este:</p> <pre><code>from django.http import HttpResponse\nfrom django.template import loader\n\ndef principal(request):\n    template = loader.get_template('principal.html')\n    return HttpResponse(template.render())\n</code></pre> <p>Para poder trabalhar com coisas mais complicadas do que \"Hello World!\" injetado diretamente no Python, temos que dizer ao Django que um novo aplicativo foi criado. Isso \u00e9 feito no arquivo <code>settings.py</code> da pasta <code>portal_biblioteca</code>. Procure a lista <code>INSTALLED_APPS[]</code> e adicione o aplicativo <code>biblioteca</code> que foi criado assim:</p> <pre><code>INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'biblioteca',  # inclua o app criado aqui\n]\n</code></pre> <p>Em seguida, execute este comando:</p> <pre><code>(venv) ... $ python3 manage.py migrate\n</code></pre> <p>OBS: Este comando aplica as migra\u00e7\u00f5es, ou seja, atualiza o esquema do banco de dados de acordo com as mudan\u00e7as nos modelos.</p> <p>Em seguida, execute o projeto django (veja se est\u00e1 tudo funcionando):</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Em seguida, acesse a URL http://127.0.0.1:8000/.</p>"},{"location":"aula-django-02/#melhorando-as-telas-do-django","title":"Melhorando as Telas do Django","text":"<p>Agora, iremos melhorar a apar\u00eancia da tela principal do nosso sistema.</p> <p>Assim, edite o arquivo HTML com nome <code>principal.html</code> na pasta <code>templates</code> com o seguinte conte\u00fado:</p> <pre><code>{% load static %}\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\"&gt; \n        &lt;title&gt;Portal Biblioteca&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"topnav\"&gt;\n            &lt;a href=\"/\"&gt;PRINCIPAL&lt;/a&gt; |\n            &lt;a href=\"/livros\"&gt;LIVROS&lt;/a&gt; |\n            &lt;a href=\"/tccs\"&gt;TCCs&lt;/a&gt; |\n            &lt;a href=\"/dashboard\"&gt;DASHBOARD&lt;/a&gt; |\n            &lt;a href=\"/auth/login\"&gt;LOGIN&lt;/a&gt; |\n            &lt;a href=\"/auth/cadastro\"&gt;CADASTRE-SE&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=\"main\"&gt;\n            &lt;h1&gt;Portal Biblioteca&lt;/h1&gt;\n            &lt;img src=\"{% static 'logo-portal.png' %}\" alt=\"logo-portal\" width=\"400\" height=\"300\"&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Em seguida, crie uma pasta chamada <code>staticfiles</code> na raiz do projeto. Crie tamb\u00e9m uma pasta chamada <code>productionfiles</code> tamb\u00e9m na raiz do projeto.</p> <p>Em seguida, crie um arquivo CSS chamado <code>mystyles.css</code> na pasta <code>staticfiles</code> com o seguinte conte\u00fado:</p> <pre><code>@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600&amp;display=swap');\nbody {\n  margin:0;\n  font: 600 18px 'Source Sans Pro', sans-serif;\n  letter-spacing: 0.64px;\n  color: #585d74;\n}\n.topnav {\n  background-color:#375BDC;\n  color:#ffffff;\n  padding:10px;\n}\n.topnav a:link, .topnav a:visited {\n  text-decoration: none;\n  color: #ffffff; \n}\n.topnav a:hover, .topnav a:active {\n  text-decoration: underline;\n}\n.mycard {\n  background-color: #f1f1f1;\n  background-image: linear-gradient(to bottom, #375BDC, #4D70EF); \n  background-size: 100% 120px;\n  background-repeat: no-repeat;\n  margin: 40px auto;\n  width: 600px;\n  border-radius: 5px;\n  box-shadow: 0 5px 7px -1px rgba(51, 51, 51, 0.23); \n  padding: 20px;\n}\n.mycard h1 {\n  text-align: center;\n  color:#ffffff;\n  margin: 20px 0 60px 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\nli {\n  background-color: #ffffff;\n  background-image: linear-gradient(to right, #375BDC, #4D70EF); \n  background-size: 50px 60px;\n  background-repeat: no-repeat;\n  cursor: pointer;\n  transition: transform .25s;\n  border-radius: 5px;\n  box-shadow: 0 5px 7px -1px rgba(51, 51, 51, 0.23);\n  padding: 15px;\n  padding-left: 70px;\n  margin-top: 5px;\n}\nli:hover {\n  transform: scale(1.1);\n}\na:link, a:visited {\n  color: #375BDC; \n}\n.main, .main h1 {\n  text-align:center;\n  color:#375BDC;\n}\n</code></pre> <p>Em seguida, copie o arquivo chamado <code>logo-portal.png</code> (baixado do github) para a pasta <code>staticfiles</code>.</p> <p>Em seguida, no final do arquivo <code>settings.py</code> na pasta <code>portal_biblioteca</code> adicione o seguinte conte\u00fado:</p> <pre><code>STATIC_URL = 'static/'\n\nSTATIC_ROOT = BASE_DIR / 'productionfiles'\n\nSTATICFILES_DIRS = [\n    BASE_DIR / 'staticfiles'\n]\n</code></pre> <p>Em seguida, execute o seguinte comando abaixo:</p> <pre><code>(venv) ... $ python3 manage.py collectstatic\n</code></pre> <p>Explica\u00e7\u00e3o: O comando acima informa ao Django para entrar nas pastas com arquivos est\u00e1ticos e fazer uma c\u00f3pia de todos os arquivos dessas pastas para a pasta <code>productionfiles</code>. Os arquivos est\u00e1ticos incluem, por exemplo, arquivos CSS, JavaScript, imagens e outros recursos que n\u00e3o s\u00e3o gerados dinamicamente pelo Django, mas s\u00e3o servidos diretamente pelo servidor web. A principal finalidade do comando <code>collectstatic</code> \u00e9 preparar os arquivos est\u00e1ticos para implanta\u00e7\u00e3o em um ambiente de produ\u00e7\u00e3o. Quando voc\u00ea est\u00e1 desenvolvendo localmente, os arquivos est\u00e1ticos podem estar espalhados em diferentes diret\u00f3rios dentro de cada aplicativo, o que n\u00e3o \u00e9 eficiente para servir em produ\u00e7\u00e3o. Portanto, voc\u00ea coleta todos esses arquivos em um \u00fanico local antes de implantar sua aplica\u00e7\u00e3o em um servidor web de produ\u00e7\u00e3o.</p> <p>Em seguida, execute o projeto django:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Em seguida, acesse a URL http://127.0.0.1:8000</p> <p>OBS: Repare que os links para as outras p\u00e1ginas ainda n\u00e3o funcionam. Isso \u00e9 esperado visto que ainda n\u00e3o criamos as outras p\u00e1ginas e rotas.</p>"},{"location":"aula-django-02/#criando-a-pagina-livros-no-django","title":"Criando a P\u00e1gina Livros no Django","text":"<p>Agora, iremos criar a tela da p\u00e1gina de Livros do nosso sistema.</p> <p>Assim, edite o arquivo <code>urls.py</code> na pasta <code>biblioteca</code> e coloque o seguinte conte\u00fado:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.principal, name='principal'),\n    path('livros', views.livros, name='livros'),  #linha adicionada\n]\n</code></pre> <p>Em seguida, edite o arquivo <code>views.py</code> na pasta <code>biblioteca</code> e coloque o seguinte conte\u00fado:</p> <pre><code>from django.http import HttpResponse\nfrom django.template import loader\n\ndef principal(request):\n    template = loader.get_template('principal.html')\n    return HttpResponse(template.render())\n\ndef livros(request):    #fun\u00e7\u00e3o adicionada\n    template = loader.get_template('livros.html')\n    context = {\n        'livros': [\n            {\n                \"nome\": \"O Senhor dos An\u00e9is\",\n                \"autor\": \"J.R.R. Tolkien\",\n                \"ano\": 1954\n            },\n            {\n                \"nome\": \"1984\",\n                \"autor\": \"George Orwell\",\n                \"ano\": 1949\n            },\n            {\n                \"nome\": \"Dom Quixote\",\n                \"autor\": \"Miguel de Cervantes\",\n                \"ano\": 1605\n            },\n            {\n                \"nome\": \"Cem Anos de Solid\u00e3o\",\n                \"autor\": \"Gabriel Garc\u00eda M\u00e1rquez\",\n                \"ano\": 1967\n            },\n            {\n                \"nome\": \"Harry Potter e a Pedra Filosofal\",\n                \"autor\": \"J.K. Rowling\",\n                \"ano\": 1997\n            },\n            {\n                \"nome\": \"Crime e Castigo\",\n                \"autor\": \"Fi\u00f3dor Dostoi\u00e9vski\",\n                \"ano\": 1866\n            },\n            {\n                \"nome\": \"A Metamorfose\",\n                \"autor\": \"Franz Kafka\",\n                \"ano\": 1915\n            },\n            {\n                \"nome\": \"O Grande Gatsby\",\n                \"autor\": \"F. Scott Fitzgerald\",\n                \"ano\": 1925\n            },\n            {\n                \"nome\": \"Orgulho e Preconceito\",\n                \"autor\": \"Jane Austen\",\n                \"ano\": 1813\n            },\n            {\n                \"nome\": \"Os Miser\u00e1veis\",\n                \"autor\": \"Victor Hugo\",\n                \"ano\": 1862\n            }\n        ]\n    }\n    return HttpResponse(template.render(context, request))\n</code></pre> <p>Em seguida, crie um arquivo HTML com nome <code>livros.html</code> na pasta <code>templates</code> com o seguinte conte\u00fado:</p> <pre><code>{% load static %}\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\"&gt; \n        &lt;title&gt;Portal Biblioteca - Livros&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"topnav\"&gt;\n            &lt;a href=\"/\"&gt;PRINCIPAL&lt;/a&gt; |\n            &lt;a href=\"/livros\"&gt;LIVROS&lt;/a&gt; |\n            &lt;a href=\"/tccs\"&gt;TCCs&lt;/a&gt; |\n            &lt;a href=\"/dashboard\"&gt;DASHBOARD&lt;/a&gt; |\n            &lt;a href=\"/auth/login\"&gt;LOGIN&lt;/a&gt; |\n            &lt;a href=\"/auth/cadastro\"&gt;CADASTRE-SE&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mycard\"&gt;\n            &lt;h1&gt;Livros&lt;/h1&gt;\n            &lt;ul&gt;\n                {% for l in livros %}\n                &lt;li&gt;{{ l.nome }} | {{ l.autor }} | {{ l.ano }} &lt;/li&gt;\n                {% endfor %}\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Em seguida, execute o projeto django:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Em seguida, acesse a URL http://127.0.0.1:8000 tanto na p\u00e1gina principal quanto a p\u00e1gina livros.</p>"},{"location":"aula-django-02/#criando-a-pagina-tccs-no-django","title":"Criando a P\u00e1gina TCCs no Django","text":"<p>Agora, iremos criar a tela da p\u00e1gina de TCCs do nosso sistema.</p> <p>Assim, edite o arquivo <code>urls.py</code> na pasta <code>biblioteca</code> e coloque o seguinte conte\u00fado:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.principal, name='principal'),\n    path('livros', views.livros, name='livros'),\n    path('tccs', views.tccs, name='tccs'),    # linha adicionada\n]\n</code></pre> <p>Em seguida, adicione ao arquivo <code>views.py</code> na pasta <code>biblioteca</code> o seguinte m\u00e9todo:</p> <pre><code>...\n\ndef tccs(request):      # fun\u00e7\u00e3o adicionada\n    template = loader.get_template('tccs.html')\n    context = {\n        'tccs': [\n            {\n                \"id\": 1,\n                \"titulo\": \"Sistemas de Recomenda\u00e7\u00e3o Personalizados\",\n                \"autor\": \"Maria Silva\",\n                \"orientador\": \"Prof. Jo\u00e3o Santos\",\n                \"ano\": 2021\n            },\n            {\n                \"id\": 2,\n                \"titulo\": \"Seguran\u00e7a de Redes em Ambientes Corporativos\",\n                \"autor\": \"Pedro Oliveira\",\n                \"orientador\": \"Profa. Ana Rodrigues\",\n                \"ano\": 2020\n            },\n            {\n                \"id\": 3,\n                \"titulo\": \"Intelig\u00eancia Artificial Aplicada \u00e0 An\u00e1lise de Dados\",\n                \"autor\": \"Luana Costa\",\n                \"orientador\": \"Prof. Andr\u00e9 Martins\",\n                \"ano\": 2019\n            },\n            {\n                \"id\": 4,\n                \"titulo\": \"Desenvolvimento de Aplicativos M\u00f3veis para Sa\u00fade\",\n                \"autor\": \"Carlos Santos\",\n                \"orientador\": \"Profa. Maria Pereira\",\n                \"ano\": 2018\n            },\n            {\n                \"id\": 5,\n                \"titulo\": \"Aprendizado de M\u00e1quina na Detec\u00e7\u00e3o de Fraudes\",\n                \"autor\": \"Rafael Ferreira\",\n                \"orientador\": \"Prof. Marcos Lima\",\n                \"ano\": 2017\n            }\n        ]\n    }\n    return HttpResponse(template.render(context, request))\n</code></pre> <p>Em seguida, crie um arquivo HTML com nome <code>tccs.html</code> na pasta <code>templates</code> com o seguinte conte\u00fado:</p> <pre><code>{% load static %}\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\"&gt; \n        &lt;title&gt;Portal Biblioteca - TCCs&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"topnav\"&gt;\n            &lt;a href=\"/\"&gt;PRINCIPAL&lt;/a&gt; |\n            &lt;a href=\"/livros\"&gt;LIVROS&lt;/a&gt; |\n            &lt;a href=\"/tccs\"&gt;TCCs&lt;/a&gt; |\n            &lt;a href=\"/dashboard\"&gt;DASHBOARD&lt;/a&gt; |\n            &lt;a href=\"/auth/login\"&gt;LOGIN&lt;/a&gt; |\n            &lt;a href=\"/auth/cadastro\"&gt;CADASTRE-SE&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mycard\"&gt;\n            &lt;h1&gt;Trabalhos de Conclus\u00e3o de Curso&lt;/h1&gt;\n            &lt;ul&gt;\n                {% for tcc in tccs %}\n                &lt;li&gt;&lt;em&gt;T\u00edtulo:&lt;/em&gt; {{ tcc.titulo }} &lt;br&gt; &lt;em&gt;Autor:&lt;/em&gt; {{ tcc.autor }} &lt;/li&gt;\n                {% endfor %}\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Em seguida, execute o projeto django:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Em seguida, acesse a URL http://127.0.0.1:8000 na p\u00e1gina principal, acesse a p\u00e1gina livros e a p\u00e1gina de TCCs.</p>"},{"location":"aula-django-02/#adicionando-tela-de-detalhes-aos-tccs","title":"Adicionando Tela de Detalhes aos TCCs","text":"<p>Agora, iremos adicionar uma tela de detalhes sobre os TCCs em nosso sistema.</p> <p>Assim, edite o arquivo <code>urls.py</code> na pasta <code>biblioteca</code> e coloque o seguinte conte\u00fado:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.principal, name='principal'),\n    path('livros', views.livros, name='livros'),\n    path('tccs', views.tccs, name='tccs'),\n    path('tccs/detalhes/&lt;int:id&gt;', views.tcc_detalhes, name='tcc_detalhes'),# linha adicionado\n]\n</code></pre> <p>Em seguida, adicione ao arquivo <code>views.py</code> na pasta <code>biblioteca</code> o seguinte m\u00e9todo:</p> <pre><code>...\n\ndef tcc_detalhes(request, id):  # fun\u00e7\u00e3o adicionada\n    tccs = [\n        {\n            \"id\": 1,\n            \"titulo\": \"Sistemas de Recomenda\u00e7\u00e3o Personalizados\",\n            \"autor\": \"Maria Silva\",\n            \"orientador\": \"Prof. Jo\u00e3o Santos\",\n            \"ano\": 2021\n        },\n        {\n            \"id\": 2,\n            \"titulo\": \"Seguran\u00e7a de Redes em Ambientes Corporativos\",\n            \"autor\": \"Pedro Oliveira\",\n            \"orientador\": \"Profa. Ana Rodrigues\",\n            \"ano\": 2020\n        },\n        {\n            \"id\": 3,\n            \"titulo\": \"Intelig\u00eancia Artificial Aplicada \u00e0 An\u00e1lise de Dados\",\n            \"autor\": \"Luana Costa\",\n            \"orientador\": \"Prof. Andr\u00e9 Martins\",\n            \"ano\": 2019\n        },\n        {\n            \"id\": 4,\n            \"titulo\": \"Desenvolvimento de Aplicativos M\u00f3veis para Sa\u00fade\",\n            \"autor\": \"Carlos Santos\",\n            \"orientador\": \"Profa. Maria Pereira\",\n            \"ano\": 2018\n        },\n        {\n            \"id\": 5,\n            \"titulo\": \"Aprendizado de M\u00e1quina na Detec\u00e7\u00e3o de Fraudes\",\n            \"autor\": \"Rafael Ferreira\",\n            \"orientador\": \"Prof. Marcos Lima\",\n            \"ano\": 2017\n        }\n    ]\n    tcc = tccs[id-1]\n    template = loader.get_template('tcc_detalhes.html')\n    context = {\n        'tcc': tcc,\n    }\n    return HttpResponse(template.render(context, request))\n</code></pre> <p>Em seguida, crie um arquivo HTML com nome <code>tcc_detalhes.html</code> na pasta <code>templates</code> com o seguinte conte\u00fado:</p> <pre><code>{% load static %}\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\"&gt; \n        &lt;title&gt;Portal Biblioteca - TCCs - Detalhes&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"topnav\"&gt;\n            &lt;a href=\"/\"&gt;PRINCIPAL&lt;/a&gt; |\n            &lt;a href=\"/livros\"&gt;LIVROS&lt;/a&gt; |\n            &lt;a href=\"/tccs\"&gt;TCCs&lt;/a&gt; |\n            &lt;a href=\"/dashboard\"&gt;DASHBOARD&lt;/a&gt; |\n            &lt;a href=\"/auth/login\"&gt;LOGIN&lt;/a&gt; |\n            &lt;a href=\"/auth/cadastro\"&gt;CADASTRE-SE&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=\"mycard\"&gt;\n            &lt;h1&gt;Trabalho de Conclus\u00e3o de Curso&lt;/h1&gt;\n            &lt;p&gt;&lt;em&gt;T\u00edtulo:&lt;/em&gt; {{ tcc.titulo }} &lt;/p&gt;\n            &lt;p&gt;&lt;em&gt;Autor:&lt;/em&gt; {{ tcc.autor }}&lt;/p&gt;\n            &lt;p&gt;&lt;em&gt;Orientador:&lt;/em&gt; {{ tcc.orientador }}&lt;/p&gt;\n            &lt;p&gt;&lt;em&gt;Ano:&lt;/em&gt; {{ tcc.ano }}&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;p&gt;&lt;center&gt;Volte para &lt;a href=\"/tccs\"&gt;TCCs&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Em seguida, edite o HTML com nome <code>tccs.html</code> na pasta <code>templates</code> com o seguinte conte\u00fado:</p> <pre><code>...\n            &lt;ul&gt;\n                {% for tcc in tccs %}\n                &lt;li onclick=\"window.location = 'tccs/detalhes/{{ tcc.id }}'\"&gt;&lt;em&gt;T\u00edtulo:&lt;/em&gt; {{ tcc.titulo }} &lt;br&gt; &lt;em&gt;Autor:&lt;/em&gt; {{ tcc.autor }} &lt;/li&gt;  &lt;!--Linha editada --&gt;\n                {% endfor %}\n            &lt;/ul&gt;\n...\n</code></pre> <p>Em seguida, execute o projeto django:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Em seguida, acesse a URL http://127.0.0.1:8000 na p\u00e1gina principal, a p\u00e1gina de TCCs e clique sobre um TCC para ver os detalhes.</p>"},{"location":"aula-django-02/#adicionando-template-mestre-no-django","title":"Adicionando Template Mestre no Django","text":"<p>A seguir iremos adicionar um template mestre (base) no Django.</p> <p>Se voc\u00ea analisar os c\u00f3digos HTMLs das p\u00e1ginas <code>principal.html</code>, <code>livros.html</code>, <code>tccs.html</code> e <code>tcc_detalhes.html</code> voc\u00ea perceber\u00e1 que tem muitos c\u00f3digos duplicados. O Django fornece uma maneira de criar um \"modelo pai\" que voc\u00ea pode incluir em todas as p\u00e1ginas para evitar repeti\u00e7\u00e3o de c\u00f3digo.</p> <p>Comece criando um template chamado <code>base.html</code> dentro da pasta <code>template</code>, com o seguinte conte\u00fado:</p> <pre><code>{% load static %}\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\"&gt; \n        &lt;title&gt;{% block titulo %}{% endblock %}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"topnav\"&gt;\n            &lt;a href=\"/\"&gt;PRINCIPAL&lt;/a&gt; |\n            &lt;a href=\"/livros\"&gt;LIVROS&lt;/a&gt; |\n            &lt;a href=\"/tccs\"&gt;TCCs&lt;/a&gt; |\n            &lt;a href=\"/dashboard\"&gt;DASHBOARD&lt;/a&gt; |\n            &lt;a href=\"/auth/login\"&gt;LOGIN&lt;/a&gt; |\n            &lt;a href=\"/auth/cadastro\"&gt;CADASTRE-SE&lt;/a&gt;\n        &lt;/div&gt;\n        {% block conteudo %}\n        {% endblock %}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Agora precisamos modificar os templates (p\u00e1ginas) anteriormente criados. Todas as p\u00e1ginas <code>principal.html</code>, <code>livros.html</code>, <code>tccs.html</code> e <code>tcc_detalhes.html</code> precisam ser modificadas para extender da p\u00e1gina base/mestre nomeada de <code>base.html</code>.</p> <p>Isso \u00e9 feito incluindo o modelo mestre com a tag <code>{% extends %}</code>  e inserindo um bloco <code>titulo</code> e um bloco <code>conteudo</code>:</p> <p>Primeiro, modifique a p\u00e1gina <code>principal.html</code> para o seguinte conte\u00fado:</p> <pre><code>{% extends \"base.html\" %}\n\n{% load static %}\n\n{% block titulo %}\n    Portal Biblioteca\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"main\"&gt;\n        &lt;h1&gt;Portal Biblioteca&lt;/h1&gt;\n        &lt;img src=\"{% static 'logo-portal.png' %}\" alt=\"logo-portal\" width=\"400\" height=\"300\"&gt;\n    &lt;/div&gt;\n{% endblock %}\n</code></pre> <p>Em seguida, modifique a p\u00e1gina <code>livros.html</code> para o seguinte conte\u00fado:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block titulo %}\n    Portal Biblioteca - Livros\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Livros&lt;/h1&gt;\n        &lt;ul&gt;\n            {% for l in livros %}\n            &lt;li&gt;{{ l.nome }} | {{ l.autor }} | {{ l.ano }} &lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n    &lt;/div&gt;\n{% endblock %}\n</code></pre> <p>Em seguida, modifique a p\u00e1gina <code>tccs.html</code> para o seguinte conte\u00fado:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block titulo %}\n    Portal Biblioteca - TCCs\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Trabalhos de Conclus\u00e3o de Curso&lt;/h1&gt;\n        &lt;ul&gt;\n            {% for tcc in tccs %}\n            &lt;li onclick=\"window.location = 'tccs/detalhes/{{ tcc.id }}'\"&gt;&lt;em&gt;T\u00edtulo:&lt;/em&gt; {{ tcc.titulo }} &lt;br&gt; &lt;em&gt;Autor:&lt;/em&gt; {{ tcc.autor }} &lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n    &lt;/div&gt;\n{% endblock %}\n</code></pre> <p>Em seguida, modifique a p\u00e1gina <code>tcc_detalhes.html</code> para o seguinte conte\u00fado:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block titulo %}\n    Portal Biblioteca - TCCs - Detalhes\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Trabalho de Conclus\u00e3o de Curso&lt;/h1&gt;\n        &lt;p&gt;&lt;em&gt;T\u00edtulo:&lt;/em&gt; {{ tcc.titulo }} &lt;/p&gt;\n        &lt;p&gt;&lt;em&gt;Autor:&lt;/em&gt; {{ tcc.autor }}&lt;/p&gt;\n        &lt;p&gt;&lt;em&gt;Orientador:&lt;/em&gt; {{ tcc.orientador }}&lt;/p&gt;\n        &lt;p&gt;&lt;em&gt;Ano:&lt;/em&gt; {{ tcc.ano }}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;p&gt;&lt;center&gt;Volte para &lt;a href=\"/tccs\"&gt;TCCs&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;\n{% endblock %}\n</code></pre> <p>Em seguida, execute o projeto django:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Em seguida, acesse a URL http://127.0.0.1:8000 e teste o sistema.</p>"},{"location":"aula-django-02/#incluindo-codigo-javascript-no-projeto","title":"Incluindo C\u00f3digo JavaScript no Projeto","text":"<p>At\u00e9 o presente momento n\u00e3o temos c\u00f3digo javascript no nosso projeto. A fim de ilustra\u00e7\u00e3o iremos fazer uma pequena tela de dashboard em nosso projeto com gr\u00e1ficos em JavaScript.</p> <p>Assim, na pasta <code>templates</code> crie um arquivo chamado <code>dashboard.html</code>. Nesse arquivo coloque o seguinte conte\u00fado:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block titulo %}\n    Portal Biblioteca - Dashboard\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Dashboard&lt;/h1&gt;\n        &lt;div&gt;\n            &lt;canvas id=\"graficoNumVolumes\"&gt;&lt;/canvas&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;&lt;/script&gt;\n\n    &lt;script&gt;\n        const ctx = document.getElementById('graficoNumVolumes');\n\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n            labels: ['Livros', 'TCCs', 'Disserta\u00e7\u00f5es', 'Teses', 'Apostilas', 'Jornais'],\n            datasets: [{\n                label: 'N\u00famero de Volumes',\n                data: [12, 19, 8, 5, 2, 10],\n                borderWidth: 1\n            }]\n            },\n            options: {\n            scales: {\n                y: {\n                    beginAtZero: true\n                }\n            }\n            }\n        });\n    &lt;/script&gt;\n{% endblock %}\n</code></pre> <p>Agora, precisamos atualizar o arquivo de <code>urls.py</code> na pasta <code>biblioteca</code>. No arquivo adicione a linha destacada:</p> <pre><code>...\n\nurlpatterns = [\n    ...\n    path('dashboard', views.dashboard, name='dashboard'), # adicione esta linha\n]\n</code></pre> <p>Agora, precisamos atualizar o arquivo de <code>views.py</code> nas pasta <code>biblioteca</code>. Adicione a fun\u00e7\u00e3o abaixo nesse arquivo.</p> <pre><code>...\n\ndef dashboard(request): # adicione essa fun\u00e7\u00e3o\n    template = loader.get_template('dashboard.html')\n    return HttpResponse(template.render())\n</code></pre> <p>Agora reinicie o servidor:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/dashboard</p> <p>Analise a p\u00e1gina de dashboard constru\u00edda.</p>"},{"location":"aula-django-02/#modularizando-o-codigo-javascript-no-projeto","title":"Modularizando o C\u00f3digo JavaScript no Projeto","text":"<p>Agora, iremos modularizar o nosso c\u00f3digo melhor.</p> <p>Assim, na pasta <code>staticfiles</code> crie um arquivo chamado <code>myscripts.js</code>. Coloque nesse arquivo o seguinte conte\u00fado:</p> <pre><code>function graficoBarras() {\n    const ctx = document.getElementById('graficoNumVolumes');\n\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n        labels: ['Livros', 'TCCs', 'Disserta\u00e7\u00f5es', 'Teses', 'Apostilas', 'Jornais'],\n        datasets: [{\n            label: 'N\u00famero de Volumes',\n            data: [12, 19, 8, 5, 2, 10],\n            borderWidth: 1\n        }]\n        },\n        options: {\n        scales: {\n            y: {\n                beginAtZero: true\n            }\n        }\n        }\n    });\n}\n\ngraficoBarras()\n</code></pre> <p>Agora, precisamos atualizar o c\u00f3digo do <code>dashboard.html</code> da pasta <code>templates</code>. O conte\u00fado desse arquivo deve ficar assim:</p> <pre><code>{% extends \"base.html\" %}\n\n{% load static %}\n\n{% block titulo %}\n    Portal Biblioteca - Dashboard\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Dashboard&lt;/h1&gt;\n        &lt;div&gt;\n            &lt;canvas id=\"graficoNumVolumes\"&gt;&lt;/canvas&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'myscripts.js' %}\"&gt;&lt;/script&gt;\n{% endblock %}\n</code></pre> <p>Em seguida, execute o seguinte comando abaixo:</p> <pre><code>(venv) ... $ python3 manage.py collectstatic\n</code></pre> <p>Agora reinicie o servidor:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/dashboard</p> <p>Analise a p\u00e1gina de dashboard constru\u00edda.</p> <p>Agora, iremos colocar um gr\u00e1fico de pizza tamb\u00e9m no nosso dashboard. Assim, na pasta <code>staticfiles</code> edite o arquivo <code>myscripts.js</code> adicionando o seguinte conte\u00fado:</p> <pre><code>...\n\nfunction graficoPizza(){\n    const ctx = document.getElementById('graficoPizza');\n\n    new Chart(ctx, {\n        type: 'pie',\n        data: {\n        labels: ['Livros', 'TCCs', 'Disserta\u00e7\u00f5es', 'Teses', 'Apostilas', 'Jornais'],\n        datasets: [{\n            label: 'N\u00famero de Volumes',\n            data: [12, 19, 8, 5, 2, 10],\n            backgroundColor: [\n                'rgb(255, 99, 132)',\n                'rgb(54, 162, 235)',\n                'rgb(255, 205, 86)',\n                'rgb(80, 60, 200)',\n                'rgb(255, 100, 86)',\n                'rgb(54, 255, 150)'\n            ],\n            hoverOffset: 8\n        }]\n        }\n    });\n}\n\ngraficoPizza()\n</code></pre> <p>Agora, atualize o arquivo de <code>dashboard.html</code> na pasta <code>templates</code>.</p> <pre><code>{% extends \"base.html\" %}\n\n{% load static %}\n\n{% block titulo %}\n    Portal Biblioteca - Dashboard\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Dashboard&lt;/h1&gt;\n        &lt;div&gt;\n            &lt;canvas id=\"graficoNumVolumes\"&gt;&lt;/canvas&gt;\n        &lt;/div&gt;\n        &lt;br&gt;\n        &lt;br&gt;\n        &lt;div&gt;\n            &lt;canvas id=\"graficoPizza\"&gt;&lt;/canvas&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'myscripts.js' %}\"&gt;&lt;/script&gt;\n{% endblock %}\n</code></pre> <p>Em seguida, execute o seguinte comando abaixo:</p> <pre><code>(venv) ... $ python3 manage.py collectstatic\n</code></pre> <p>Agora reinicie o servidor:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/dashboard</p> <p>Analise a p\u00e1gina de dashboard constru\u00edda.</p> <p>Para mais informa\u00e7\u00f5es sobre gr\u00e1ficos em javacript consulte a documenta\u00e7\u00e3o da biblioteca chart.js.</p>"},{"location":"aula-django-03/","title":"Aula Djando 03 - Sistema para Portal Biblioteca","text":"<p>Aula Djando 03. Projeto utilizando o Django para ser desenvolvido na Aula de GAC116 - Programa\u00e7\u00e3o Web.</p> <p>O objetivo desse projeto \u00e9 criar um sistema para gest\u00e3o de biblioteca.</p> <p>Este tutorial foi elaborado baseado no tutorial dispon\u00edvel no curso de django da w3schools e tamb\u00e9m baseado na documenta\u00e7\u00e3o oficial do django.</p>"},{"location":"aula-django-03/#linguagens-utilizadas","title":"Linguagens Utilizadas","text":"<ul> <li>Python - link</li> <li>JavaScript - link</li> <li>HTML - link</li> <li>CSS - link</li> </ul>"},{"location":"aula-django-03/#framework-utilizados","title":"Framework Utilizados","text":"<ul> <li>Django - link</li> <li>Bootstrap - link</li> <li>Chart.js - link</li> </ul>"},{"location":"aula-django-03/#ferramentas-utilizadas","title":"Ferramentas Utilizadas","text":"<ul> <li>Pip - link</li> <li>VirtualEnv - link</li> <li>Visual Studio Code - link</li> <li>SQLite Online - link</li> <li>DB Browser for SQLite - link</li> </ul>"},{"location":"aula-django-03/#arquitetura-web","title":"Arquitetura Web","text":""},{"location":"aula-django-03/#arquitetura-geral-das-aplicacao-web","title":"Arquitetura Geral das Aplica\u00e7\u00e3o Web","text":"<p>Fonte: https://blog.grancursosonline.com.br/arquitetura-em-tres-camadas-para-aplicacoes-web/</p>"},{"location":"aula-django-03/#arquitetura-django","title":"Arquitetura Django","text":""},{"location":"aula-django-03/#arquitetura-mvt-geral","title":"Arquitetura MVT - Geral","text":""},{"location":"aula-django-03/#arquitetura-mvt-requisicao","title":"Arquitetura MVT - Requisi\u00e7\u00e3o","text":""},{"location":"aula-django-03/#arquitetura-mvt-detalhes","title":"Arquitetura MVT - Detalhes","text":""},{"location":"aula-django-03/#objetivo-da-aula","title":"Objetivo da Aula","text":"<p>A anima\u00e7\u00e3o abaixo mostra de forma visual o resultado esperado nesta aula.</p> <p></p>"},{"location":"aula-django-03/#comandos-utilizados-na-criacao-deste-projeto","title":"Comandos utilizados na cria\u00e7\u00e3o deste projeto","text":""},{"location":"aula-django-03/#clonando-o-repositorio","title":"Clonando o Reposit\u00f3rio","text":"<p>Inicialmente, clone o reposit\u00f3rio da seguinte forma:</p> <pre><code>git clone https://github.com/ufla-prog-web/aula-django-03.git\n</code></pre>"},{"location":"aula-django-03/#baixando-o-repositorio","title":"Baixando o Reposit\u00f3rio","text":"<p>Caso deseje ao inv\u00eas de clonar o reposit\u00f3rio (m\u00e9todo acima), baixe o reposit\u00f3rio do link clicando em <code>Code</code> e <code>Download ZIP</code>.</p>"},{"location":"aula-django-03/#instalacao-do-virtualenv","title":"Instala\u00e7\u00e3o do VirtualEnv","text":"<p>Se necess\u00e1rio, instale o virtualenv (testado na vers\u00e3o 20.24.1):</p> <pre><code>pip3 install virtualenv\n</code></pre> <p>ou</p> <pre><code>python3 -m pip install --user virtualenv\n</code></pre> <p>Verifique a vers\u00e3o instalada do virtualenv (para ter certeza que tudo ocorreu bem):</p> <pre><code>virtualenv --version\n</code></pre> <p>ou</p> <pre><code>python3 -m virtualenv --version\n</code></pre>"},{"location":"aula-django-03/#abrindo-o-visual-studio-code","title":"Abrindo o Visual Studio Code","text":"<p>Abra a IDE Visual Studio Code na pasta aula-django-03.</p> <p>Dica: Abra o arquivo <code>README.md</code> e clique em <code>Open Preview to the Side</code> para facilitar a constru\u00e7\u00e3o da aplica\u00e7\u00e3o.</p> <p>Dica: Abra um terminal utilizando a IDE clicando em <code>Terminal</code> e <code>New Terminal</code>. Navegue at\u00e9 a pasta <code>portal_biblioteca</code>.</p>"},{"location":"aula-django-03/#criacao-do-ambiente-virtual","title":"Cria\u00e7\u00e3o do Ambiente Virtual","text":"<p>Navegue at\u00e9 a pasta <code>aula-djando-03/portal_biblioteca</code>.</p> <p>Crie o ambiente virtual para isolar as instala\u00e7\u00f5es Python:</p> <pre><code>python3 -m venv venv\n</code></pre> <p>ou</p> <pre><code>virtualenv venv\n</code></pre> <p>Ativei o ambiente virtual para fazer as instala\u00e7\u00f5es de forma isolada:</p> <p>Sistema Operacional: Unix/Mac OS:</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Sistema Operacional: Windows</p> <pre><code>venv\\Scripts\\activate.bat\n</code></pre> <p>Quando desejar sair do ambiente virtual, basta digitar:</p> <pre><code>(venv) ... $ deactivate\n</code></pre>"},{"location":"aula-django-03/#instalacao-do-django","title":"Instala\u00e7\u00e3o do Django","text":"<p>Instale o django dentro do ambiente virtual criado (testado na vers\u00e3o 4.2.5):</p> <pre><code>(venv) ... $ pip3 install django\n</code></pre> <p>ou</p> <pre><code>(venv) ... $ python -m pip install Django\n</code></pre> <p>Verifique a vers\u00e3o instalada do django (para ter certeza que tudo ocorreu bem):</p> <pre><code>(venv) ... $ django-admin --version\n</code></pre> <p>ou</p> <pre><code>(venv) ... $ python3 -m django --version\n</code></pre> <p>OBS: Caso o terminal n\u00e3o encontre o django-admin, execute o seguinte comando abaixo (utilizado geralmente quando n\u00e3o se utiliza o VirtualEnv no laborat\u00f3rio DCC07):</p> <pre><code>export PATH=$PATH:~/.local/bin\n</code></pre>"},{"location":"aula-django-03/#executando-o-projeto","title":"Executando o Projeto","text":"<p>Antes de executar o projeto, execute o comando para fazer as migra\u00e7\u00f5es:</p> <pre><code>(venv) ... $ python3 manage.py migrate\n</code></pre> <p>Em seguida, execute comando abaixo para fazer a c\u00f3pia dos arquivos est\u00e1ticos:</p> <pre><code>(venv) ... $ python3 manage.py collectstatic\n</code></pre> <p>Inicie a execu\u00e7\u00e3o do projeto django criado:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>OBS: Por padr\u00e3o, o servidor de desenvolvimento escuta na porta 8000, mas voc\u00ea pode especificar uma porta diferente como argumento opcional, por exemplo, <code>python3 manage.py runserver 8081</code>.</p> <p>Acesse atrav\u00e9s do navegdor web a p\u00e1gina http://127.0.0.1:8000/.</p> <p>A aula anterior avan\u00e7ou at\u00e9 aqui.</p>"},{"location":"aula-django-03/#criando-nosso-primeiro-modelo","title":"Criando nosso Primeiro Modelo","text":"<p>At\u00e9 esse momento fizemos a nossa aplica\u00e7\u00e3o web com interface, com URLs e algum processamento, mas n\u00e3o trabalhamos com Banco de Dados. Os dados estavam inseridos diretamente no c\u00f3digo.</p> <p>Iremos agora criar o nosso modelo para representar Livros e TCCs no Banco de Dados SQLite dispon\u00edvel no Django. No Django, os dados s\u00e3o criados em objetos, chamados Modelos, e na verdade s\u00e3o tabelas em um banco de dados.</p> <p>Primeiramente, iremos criar uma classe chamada <code>Livro</code>. Para isso abra o arquivo <code>models.py</code> na pasta <code>biblioteca</code> e digite o seguinte conte\u00fado:</p> <pre><code>from django.db import models\n\nclass Livro(models.Model):\n    nome = models.CharField(max_length=255)\n    autor = models.CharField(max_length=255)\n    ano = models.IntegerField()\n</code></pre> <p>O c\u00f3digo acima ir\u00e1 criar uma Tabela chamada Livro no BD SQLite. Os campos <code>nome</code> e <code>autor</code> s\u00e3o campos de texto e est\u00e3o configurados para ter no m\u00e1ximo 255 caracteres. O campo <code>ano</code> \u00e9 um campo num\u00e9rico inteiro.</p> <p>OBS: Quando criamos o projeto Django, obtivemos um banco de dados SQLite vazio. Ele estava na raiz da pasta portal_biblioteca e possui o nome de arquivo db.sqlite3. Por padr\u00e3o, todos os modelos criados no projeto Django ser\u00e3o criados como tabelas neste banco de dados.</p> <p>Em seguida, execute o c\u00f3digo abaixo para que seja criado a tabela Livro no banco de dados de fato:</p> <pre><code>(venv) ... $ python3 manage.py makemigrations biblioteca\n</code></pre> <p>OBS: Ap\u00f3s definir os modelos, voc\u00ea cria migra\u00e7\u00f5es com este comando. Isso cria arquivos de migra\u00e7\u00e3o que descrevem como o banco de dados deve ser modificado para refletir as altera\u00e7\u00f5es nos modelos.</p> <p>O que resultar\u00e1 nesta sa\u00edda:</p> <pre><code>Migrations for 'biblioteca':\n  biblioteca/migrations/0001_initial.py\n    - Create model Livro\n</code></pre> <p>O Django cria um arquivo descrevendo as altera\u00e7\u00f5es e armazena o arquivo na pasta <code>/biblioteca/migrations/</code> com nome <code>0001_initial.py</code>. Abra esse arquivo para analisar o conte\u00fado. Observe que o Django insere um campo <code>id</code> para suas tabelas, que \u00e9 um n\u00famero auto incrementado.</p> <p>A tabela ainda n\u00e3o foi criada, voc\u00ea ter\u00e1 que executar mais um comando, ent\u00e3o o Django criar\u00e1 e executar\u00e1 uma instru\u00e7\u00e3o SQL, baseada no conte\u00fado do novo arquivo da pasta <code>/biblioteca/migrations/</code>.</p> <p>Execute o comando de migra\u00e7\u00e3o:</p> <pre><code>(venv) ... $ python3 manage.py migrate\n</code></pre> <p>OBS: Este comando aplica as migra\u00e7\u00f5es, ou seja, atualiza o esquema do banco de dados de acordo com as mudan\u00e7as nos modelos.</p> <p>O que resultar\u00e1 nesta sa\u00edda:</p> <pre><code>Operations to perform:\n  Apply all migrations: admin, auth, biblioteca, contenttypes, sessions\nRunning migrations:\n  Applying biblioteca.0001_initial... OK\n</code></pre> <p>Usaremos o interpretador Python (Python Shell) para adicionar alguns livros a tabela criada no BD. Para abrir um shell Python, digite este comando:</p> <pre><code>(venv) ... $ python3 manage.py shell\n</code></pre> <p>O que resultar\u00e1 nesta sa\u00edda:</p> <pre><code>Python 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt;\n</code></pre> <p>Na parte inferior, ap\u00f3s os tr\u00eas, <code>&gt;&gt;&gt;</code> escreva o seguinte:</p> <pre><code>&gt;&gt;&gt; from biblioteca.models import Livro\n</code></pre> <p>Pressione [enter] e escreva o c\u00f3digo abaixo para ver a tabela Livro vazia:</p> <pre><code>&gt;&gt;&gt; Livro.objects.all()\n</code></pre> <p>Isso deve fornecer um objeto QuerySet vazio, como este:</p> <pre><code>&lt;QuerySet []&gt;\n</code></pre> <p>Um QuerySet \u00e9 uma cole\u00e7\u00e3o de dados de um banco de dados.</p> <p>Adicione um registro \u00e0 tabela, executando estas duas linhas:</p> <pre><code>&gt;&gt;&gt; livro = Livro(nome='O Senhor dos An\u00e9is', autor='J.R.R. Tolkien', ano=1954)\n&gt;&gt;&gt; livro.save()\n</code></pre> <p>Execute este comando para ver se a tabela Livro possui um membro:</p> <pre><code>Livro.objects.all().values()\n</code></pre> <p>O que resultar\u00e1 nesta sa\u00edda:</p> <pre><code>&lt;QuerySet [{'id': 1, 'nome': 'O Senhor dos An\u00e9is', 'autor': 'J.R.R. Tolkien', 'ano': 1954}]&gt;\n</code></pre> <p>Para sair do ambiente shell digite:</p> <pre><code>quit()\n</code></pre> <p>Voc\u00ea acaba de aprender como criar uma tabela no BD e como inserir informa\u00e7\u00f5es nessa tabela utilizando o interpretador do Python. Existe outras formas de fazer a inser\u00e7\u00e3o de informa\u00e7\u00f5es nessa tabela e veremos isso adiante.</p>"},{"location":"aula-django-03/#ambiente-administrativo-do-django","title":"Ambiente Administrativo do Django","text":"<p>O Django Admin \u00e9 uma ferramenta \u00f3tima do Django, na verdade \u00e9 uma interface de usu\u00e1rio CRUD (Criar, Ler, Atualizar, Excluir) para todos os seus modelos!</p> <p>Para entrar na interface do usu\u00e1rio administrativo, inicie o servidor com este comando:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Na janela do navegador, digite na barra de endere\u00e7o 127.0.0.1:8000/admin/</p> <p>A raz\u00e3o pela qual esta URL vai para a p\u00e1gina de login do administrador do Django pode ser encontrada no arquivo <code>urls.py</code> do seu projeto:</p> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('biblioteca.urls')),\n    path('admin/', admin.site.urls), # defini\u00e7\u00e3o da rota do ambiente adminstrativo\n]\n</code></pre> <p>Explica\u00e7\u00e3o: A lista <code>urlpatterns[]</code> recebe solicita\u00e7\u00f5es na rota <code>admin/</code> e as envia para <code>admin.site.urls</code>, que faz parte de um aplicativo integrado que vem com o Django e cont\u00e9m muitas funcionalidades e interfaces de usu\u00e1rio, sendo uma delas a interface de usu\u00e1rio de login.</p>"},{"location":"aula-django-03/#criando-um-usuario-no-django","title":"Criando um Usu\u00e1rio no Django","text":"<p>Para poder fazer login no ambiente administrativo do Django, precisamos criar um usu\u00e1rio. Isso \u00e9 feito digitando este comando:</p> <pre><code>(venv) ... $ python3 manage.py createsuperuser\n</code></pre> <p>O que dar\u00e1 um prompt como esse:</p> <pre><code>Username: admin\nEmail address: \nPassword: \nPassword (again): \nThe password is too similar to the username.\nThis password is too short. It must contain at least 8 characters.\nThis password is too common.\nBypass password validation and create user anyway? [y/N]: y\n</code></pre> <p>OBS: Aqui voc\u00ea deve inserir: nome de usu\u00e1rio, endere\u00e7o de e-mail (voc\u00ea pode simplesmente deixar em branco ou escolher um endere\u00e7o de e-mail falso) e senha. Em meu caso coloquei usu\u00e1rio <code>admin</code> email em branco e senha <code>admin</code>.</p> <p>Minha senha n\u00e3o atendeu aos crit\u00e9rios, mas este \u00e9 um ambiente de teste, e opto por criar usu\u00e1rio mesmo assim, digitando <code>y</code> gerando assim a sa\u00edda:</p> <pre><code>Superuser created successfully.\n</code></pre> <p>Agora reinicie o servidor:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Na janela do navegador, digite na barra de endere\u00e7o 127.0.0.1:8000/admin/.</p> <p>Preencha o formul\u00e1rio com o nome de usu\u00e1rio e senha corretos (<code>admin</code> e <code>admin</code>).</p> <p>Na interface aberta voc\u00ea pode criar, ler, atualizar e excluir grupos e usu\u00e1rios, mas onde est\u00e1 o modelo de Livro?</p> <p>O modelo Livro est\u00e1 faltando, como deveria estar. Voc\u00ea tem que informar ao Django quais modelos devem estar vis\u00edveis na interface administrativa.</p> <p>Para incluir o modelo Livro na interface administrativa, temos que dizer ao Django que este modelo deve estar vis\u00edvel na interface administrativa.</p> <p>Isso \u00e9 feito em um arquivo chamado <code>admin.py</code>, e est\u00e1 localizado na pasta do seu aplicativo, que no nosso caso \u00e9 a pasta <code>biblioteca</code>.</p> <p>Abra-o, o mesmo deve estar assim:</p> <pre><code>from django.contrib import admin\n\n# Register your models here.\n</code></pre> <p>Insira algumas linhas aqui para tornar o modelo Livro vis\u00edvel na p\u00e1gina de administra\u00e7\u00e3o:</p> <pre><code>from django.contrib import admin\nfrom .models import Livro\n\nadmin.site.register(Livro)\n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/admin/</p> <p>Clique em Livros e veja o registro de livros que inserimos anteriormente neste tutorial:</p> <p>Na lista de Livros, vemos \"Livro object (1)\", \"Livro membro (2)\" etc., que podem n\u00e3o ser os dados que voc\u00ea deseja que sejam exibidos na lista. Seria melhor exibir \"nome\" e \"autor\".</p> <p>Para mudar isso para um formato mais f\u00e1cil de ler, temos duas op\u00e7\u00f5es:</p> <ul> <li>Alterar a fun\u00e7\u00e3o de representa\u00e7\u00e3o de string <code>__str__()</code> do modelo de Livro.</li> <li>Definir a propriedade <code>list_details</code> do modelo de Livro.</li> </ul> <p>Para alterar utilizando a primeira forma, devemos alterar a fun\u00e7\u00e3o de representa\u00e7\u00e3o de string <code>__str__()</code> do modelo de Livro. Para isso fa\u00e7a o seguinte no arquivo <code>models.py</code> dentro da pasta <code>biblioteca</code>:</p> <pre><code>from django.db import models\n\nclass Livro(models.Model):\n    nome = models.CharField(max_length=255)\n    autor = models.CharField(max_length=255)\n    ano = models.IntegerField()\n\n    def __str__(self):  #defini\u00e7\u00e3o de fun\u00e7\u00e3o adionada\n        return f\"{self.nome} - {self.autor}\" \n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/admin/.</p> <p>Para alterar utilizando a segunda forma (RECOMENDADA), devemos definir a propriedade <code>list_display</code> do arquivo <code>admin.py</code>. Primeiro crie uma classe <code>LivroAdmin()</code> e especifique a tupla <code>list_display</code>, assim:</p> <pre><code>from django.contrib import admin\nfrom .models import Livro\n\nclass LivroAdmin(admin.ModelAdmin):\n    list_display = (\"nome\", \"autor\", \"ano\")\n\nadmin.site.register(Livro, LivroAdmin)\n</code></pre> <p>OBS: Lembre-se de adicionar LivroAdmin como um argumento no arquivo, como em: <code>admin.site.register(Livro, LivroAdmin)</code>.</p> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/admin/.</p>"},{"location":"aula-django-03/#adicionando-novos-livros","title":"Adicionando novos Livros","text":"<p>Agora podemos criar, atualizar e excluir livros em nosso banco de dados.</p> <p>Iremos adicionar mais dois livros, clique no bot\u00e3o \"ADD LIVRO\" no canto superior direito:</p> <p>Voc\u00ea receber\u00e1 um formul\u00e1rio vazio onde poder\u00e1 preencher os campos do livro. Utilize as informa\u00e7\u00f5es a seguir para preenchimento:</p> <pre><code>{\n    \"nome\": \"1984\",\n    \"autor\": \"George Orwell\",\n    \"ano\": 1949\n},\n{\n    \"nome\": \"Dom Quixote\",\n    \"autor\": \"Miguel de Cervantes\",\n    \"ano\": 1605\n}\n</code></pre> <p>Preencha os campos e clique em <code>SAVE</code>:</p>"},{"location":"aula-django-03/#carregando-a-interface-livro-com-dados-do-bd","title":"Carregando a Interface Livro com Dados do BD","text":"<p>At\u00e9 aqui, vimos como trabalhar com o Banco de Dados, mas a interface da nossa aplica\u00e7\u00e3o (livro) ainda n\u00e3o est\u00e1 fazendo a leitura dos dados do BD.</p> <p>Agora, iremos atualizar a interface para puxar/pegar os dados do BD.</p> <p>Assim, \u00e9 necess\u00e1rio atualizar o c\u00f3digo <code>views.py</code> da pasta <code>biblioteca</code>. Devemos remover os dados que estavam inseridos estaticamente nesse arquivo.</p> <pre><code>...\nfrom .models import Livro    # adicione esta importa\u00e7\u00e3o\n\n...\n\ndef livros(request):         # atualize esta fun\u00e7\u00e3o\n    livros = Livro.objects.all().values()\n    template = loader.get_template('livros.html')\n    context = {\n        'livros': livros,\n    }\n    return HttpResponse(template.render(context, request))\n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/livros.</p> <p>Repare que os livros listados s\u00e3o somente os livros cadastrados no Banco de Dados.</p>"},{"location":"aula-django-03/#configuracao-do-projeto-django-em-portugues","title":"Configura\u00e7\u00e3o do Projeto Django em Portugu\u00eas","text":"<p>Repare que todo o ambiente administrativo do django est\u00e1 em Ingl\u00eas, vamos agora, alterar isso para portugu\u00eas.</p> <p>Assim, no arquivo <code>settings.py</code> (na pasta <code>portal_biblioteca</code>), fa\u00e7a a seguinte altera\u00e7\u00e3o:</p> <pre><code>...\nLANGUAGE_CODE = 'pt-BR'\n...\n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/admin/.</p>"},{"location":"aula-django-03/#carregando-a-interface-tcc-com-dados-do-bd","title":"Carregando a Interface TCC com Dados do BD","text":"<p>At\u00e9 aqui criamos apenas uma Tabela no BD que \u00e9 Livro. Agora iremos criar uma Tabela TCC no Modelo do BD.</p> <p>Primeiramente, iremos criar uma classe chamada <code>TCC</code>. Para isso, abra o arquivo <code>models.py</code> na pasta <code>biblioteca</code> e digite o seguinte conte\u00fado:</p> <pre><code>from django.db import models\n\n...\n\nclass TCC(models.Model):    # classe adiconada\n    titulo = models.CharField(max_length=255)\n    autor = models.CharField(max_length=255)\n    orientador = models.CharField(max_length=255)\n    ano = models.IntegerField()\n\n    def __str__(self):\n        return f\"{self.titulo} - {self.autor}\"\n</code></pre> <p>O c\u00f3digo acima ir\u00e1 criar uma Tabela chamada TCC no BD SQLite.</p> <p>Em seguida, execute o c\u00f3digo abaixo para que seja criado a tabela TCC no banco de dados de fato:</p> <pre><code>(venv) ... $ python3 manage.py makemigrations biblioteca\n</code></pre> <p>O que resultar\u00e1 nesta sa\u00edda:</p> <pre><code>Migrations for 'biblioteca':\n  biblioteca/migrations/0002_tcc.py\n    - Create model TCC\n</code></pre> <p>A tabela ainda n\u00e3o foi criada, execute o comando de migra\u00e7\u00e3o para que a tabela seja de fato criada:</p> <pre><code>(venv) ... $ python3 manage.py migrate\n</code></pre> <p>O que resultar\u00e1 nesta sa\u00edda:</p> <pre><code>Operations to perform:\n  Apply all migrations: admin, auth, biblioteca, contenttypes, sessions\nRunning migrations:\n  Applying biblioteca.0002_tcc... OK\n</code></pre> <p>Agora, iremos informar ao Django quais modelos devem estar vis\u00edveis na interface administrativa. Para incluir o modelo TCC na interface administrativa, temos que dizer ao Django que este modelo deve estar vis\u00edvel na interface administrativa.</p> <p>Isso \u00e9 feito em um arquivo chamado <code>admin.py</code>, e est\u00e1 localizado na pasta do seu aplicativo, que no nosso caso \u00e9 a pasta <code>biblioteca</code>. Digite o seguinte c\u00f3digo:</p> <pre><code>from django.contrib import admin\nfrom .models import Livro\nfrom .models import TCC    #linha adicionada\n\nclass LivroAdmin(admin.ModelAdmin):\n    list_display = (\"nome\", \"autor\", \"ano\")\n\nclass TCCAdmin(admin.ModelAdmin):  # fun\u00e7\u00e3o adicionada\n    list_display = (\"titulo\", \"autor\", \"orientador\", \"ano\")\n\nadmin.site.register(Livro, LivroAdmin)\nadmin.site.register(TCC, TCCAdmin) # linha adicionada\n</code></pre> <p>Agora, reinicie o servidor:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Agora, volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/admin/.</p> <p>Agora, podemos criar, atualizar e excluir TCCs em nosso banco de dados.</p> <p>Iremos adicionar mais tr\u00eas TCCs, clique no bot\u00e3o \"ADICIONAR TCC\" no canto superior direito:</p> <p>Voc\u00ea receber\u00e1 um formul\u00e1rio vazio onde poder\u00e1 preencher os campos do TCC. Utilize as informa\u00e7\u00f5es a seguir para preenchimento:</p> <pre><code>{\n    \"titulo\": \"Sistemas de Recomenda\u00e7\u00e3o Personalizados\",\n    \"autor\": \"Maria Silva\",\n    \"orientador\": \"Prof. Jo\u00e3o Santos\",\n    \"ano\": 2021\n},\n{\n    \"titulo\": \"Seguran\u00e7a de Redes em Ambientes Corporativos\",\n    \"autor\": \"Pedro Oliveira\",\n    \"orientador\": \"Profa. Ana Rodrigues\",\n    \"ano\": 2020\n},\n{\n    \"titulo\": \"Intelig\u00eancia Artificial Aplicada \u00e0 An\u00e1lise de Dados\",\n    \"autor\": \"Luana Costa\",\n    \"orientador\": \"Prof. Andr\u00e9 Martins\",\n    \"ano\": 2019\n}\n</code></pre> <p>Preencha os campos e clique em <code>SAVE</code>:</p> <p>Agora, iremos atualizar a interface do TCC para puxar/pegar os dados do BD.</p> <p>Assim, \u00e9 necess\u00e1rio atualizar o c\u00f3digo <code>views.py</code> da pasta <code>biblioteca</code>.</p> <pre><code>...\nfrom .models import TCC    # adicione esta importa\u00e7\u00e3o\n\n...\n\ndef tccs(request):         # atualize esta fun\u00e7\u00e3o\n    tccs = TCC.objects.all().values()\n    template = loader.get_template('tccs.html')\n    context = {\n        'tccs': tccs,\n    }\n    return HttpResponse(template.render(context, request))\n</code></pre> <p>Agora volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/tccs.</p> <p>Repare que os TCCs listados s\u00e3o somente os TCCs cadastrados no Banco de Dados.</p> <p>Ainda no c\u00f3digo <code>views.py</code> da pasta <code>biblioteca</code> atualize a fun\u00e7\u00e3o <code>tcc_detalhes</code> para que a mesma pegue os dados tamb\u00e9m do banco de dados baseado no <code>id</code>.</p> <pre><code>...\ndef tcc_detalhes(request, id):\n    tcc = TCC.objects.get(id=id)\n    template = loader.get_template('tcc_detalhes.html')\n    context = {\n        'tcc': tcc,\n    }\n    return HttpResponse(template.render(context, request))\n</code></pre> <p>Para mais informa\u00e7\u00f5es, consulte a documenta\u00e7\u00e3o oficial do django.</p>"},{"location":"aula-django-03/#adicionando-controle-de-usuarios-no-django","title":"Adicionando Controle de Usu\u00e1rios no Django","text":"<p>Esta parte do tutorial foi baseada na documenta\u00e7\u00e3o oficial django e tamb\u00e9m na videoaula.</p> <p>O Django possui j\u00e1 prontos diversos recursos para trabalhar com autentica\u00e7\u00e3o de usu\u00e1rios e controle de n\u00edvel de acesso.</p> <p>Agora, iremos adicionar em nosso projeto um sistema de gest\u00e3o de usu\u00e1rios. Para criarmos na sequ\u00eancia as telas de login e cadastro na plataforma.</p> <p>Para isso, iremos criar uma outra aplica\u00e7\u00e3o/aplicativo web dentro do nosso projeto. Assim, digite o seguinte conte\u00fado.</p> <pre><code>(venv) ... $ python3 manage.py startapp usuarios\n</code></pre> <p>Agora, atualize a lista <code>INSTALLED_APPS</code> em <code>settings.py</code> na pasta <code>portal_biblioteca</code>:</p> <pre><code>...\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'biblioteca',\n    'usuarios', #adicone seu app aqui \n]\n...\n</code></pre> <p>Agora, crie na pasta <code>usuarios</code> um arquivo chamado <code>urls.py</code> com o seguinte conte\u00fado:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('login', views.login, name='login'),\n    path('cadastro', views.cadastro, name='cadastro'),\n]\n</code></pre> <p>Agora, precisamos informar a nossa aplica\u00e7\u00e3o principal da exist\u00eancia dessas novas URLs. Assim, edite o c\u00f3digo <code>urls.py</code> da pasta <code>porta_biblioteca</code> da seguinte forma:</p> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('biblioteca.urls')),\n    path('auth/', include('usuarios.urls')),   #adicione essa linha aqui\n    path('admin/', admin.site.urls),\n]\n</code></pre> <p>Agora, precisamos definir as views do nosso sistema de login e cadastro. Assim, digite o c\u00f3digo abaixo no arquivo <code>views.py</code> na pasta <code>usuarios</code>:</p> <pre><code>from django.http import HttpResponse\nfrom django.shortcuts import render\n\ndef login(request):\n    return render(request, 'login.html')\n\ndef cadastro(request):\n    return render(request, 'cadastro.html')\n</code></pre> <p>Agora, iremos criar uma pasta chamada <code>templates</code> dentro da aplica\u00e7\u00e3o <code>usuarios</code>. Nesta pasta, iremos criar um arquivo chamado <code>login.html</code> com o seguinte conte\u00fado:</p> <pre><code>&lt;h1&gt;Login&lt;/h1&gt;\n</code></pre> <p>Ainda nesta pasta, iremos criar tamb\u00e9m um arquivo chamado <code>cadastro.html</code> com o seguinte conte\u00fado:</p> <pre><code>&lt;h1&gt;Cadastro&lt;/h1&gt;\n</code></pre> <p>Agora, reinicie o servidor:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Agora, volte para o navegador e atualize a barra de endere\u00e7o 127.0.0.1:8000/. Navegue pelas abas Login e Cadastre-se.</p>"},{"location":"aula-django-03/#melhorando-a-tela-de-cadastro","title":"Melhorando a Tela de Cadastro","text":"<p>Agora, iremos definir melhor a tela de Cadastro.</p> <p>No arquivo <code>cadastro.html</code> digite o seguinte:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block titulo %}\n    Portal Biblioteca - Cadastro\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Cadastre-se&lt;/h1&gt;\n        &lt;center&gt;\n        &lt;form action=\"{% url 'cadastro' %}\" method=\"POST\"&gt;\n            {% csrf_token %}\n            Usu\u00e1rio: &lt;input type=\"text\" placeholder=\"Usu\u00e1rio ...\" name=\"usuario\"&gt;\n            &lt;br&gt;\n            &lt;br&gt;\n            E-mail: &lt;input type=\"email\" placeholder=\"E-mail ...\" name=\"email\"&gt;\n            &lt;br&gt;\n            &lt;br&gt;\n            Senha: &lt;input type=\"password\" placeholder=\"Senha ...\" name=\"senha\"&gt;\n            &lt;br&gt;\n            &lt;br&gt;\n            &lt;input type=\"submit\" value=\"Cadastrar\"&gt;\n        &lt;/form&gt;\n        &lt;/center&gt;\n    &lt;/div&gt;\n{% endblock %}\n</code></pre> <p>Explica\u00e7\u00e3o: O c\u00f3digo acima cria um formul\u00e1rio com os seguintes campos: usu\u00e1rio, email, senha e bot\u00e3o cadastrar. Neste formul\u00e1rio, quando clicado no bot\u00e3o cadastrar enviar\u00e1 uma a\u00e7\u00e3o via m\u00e9todo POST para a url de nome <code>cadastro</code> (nome definida no arquivo <code>url.py</code>). A tag <code>csrf_token</code> \u00e9 necess\u00e1ria para fazer uma verifica\u00e7\u00e3o de seguran\u00e7a.</p> <p>Explica\u00e7\u00e3o: O CSRF Token, que significa \"Cross-Site Request Forgery Token\" (Token de Prote\u00e7\u00e3o contra Solicita\u00e7\u00e3o Falsificada entre Sites), \u00e9 uma medida de seguran\u00e7a utilizada em aplica\u00e7\u00f5es da web para proteger contra ataques CSRF (Cross-Site Request Forgery), tamb\u00e9m conhecidos como ataques de falsifica\u00e7\u00e3o de solicita\u00e7\u00e3o entre sites. Um ataque CSRF ocorre quando um invasor engana um usu\u00e1rio autenticado a executar a\u00e7\u00f5es indesejadas em um site sem o conhecimento ou consentimento do usu\u00e1rio. Isso \u00e9 feito explorando o fato de que os navegadores da web geralmente incluem automaticamente cookies de sess\u00e3o em todas as solicita\u00e7\u00f5es para um dom\u00ednio, incluindo solicita\u00e7\u00f5es maliciosas.</p> <p>Em seguida, atualize o c\u00f3digo do m\u00e9todo cadastro na <code>view.py</code>.</p> <pre><code>...\ndef cadastro(request): # atualize essa fun\u00e7\u00e3o\n    if request.method == \"GET\":\n        return render(request, 'cadastro.html')\n    else: #sen\u00e3o ser\u00e1 via m\u00e9todo \"POST\":\n        usuario = request.POST.get('usuario')\n        email = request.POST.get('email')\n        senha = request.POST.get('senha')\n        return HttpResponse(usuario)\n</code></pre> <p>Em seguida, acesse o servidor e efetue um cadastro e analise o resultado na tela.</p> <p>At\u00e9 aqui, n\u00e3o efetuamos de fato um cadastro, apenas exibimos na tela a informa\u00e7\u00e3o do usu\u00e1rio. </p> <p>Agora, iremos inserir as informa\u00e7\u00f5es cadastradas no BD.</p> <p>Assim, atualize o c\u00f3digo do m\u00e9todo <code>cadastro</code> na <code>view.py</code>.</p> <pre><code>from django.contrib.auth.models import User\n\n...\n\ndef cadastro(request):\n    if request.method == \"GET\":\n        return render(request, 'cadastro.html')\n    else: #sen\u00e3o ser\u00e1 via m\u00e9todo \"POST\":\n        usuario = request.POST.get('usuario')\n        email = request.POST.get('email')\n        senha = request.POST.get('senha')\n\n        user = User.objects.filter(username=usuario).first()\n        if user:\n            return HttpResponse('J\u00e1 existe um usu\u00e1rio com esse username')\n\n        # se n\u00e3o existir usu\u00e1rio com esse nome cria e salva o mesmo.\n        user = User.objects.create_user(username=usuario, email=email, password=senha)\n        user.save()\n\n        return HttpResponse('Usu\u00e1rio cadastrado com sucesso')\n</code></pre> <p>Em seguida, acesse o servidor e efetue um cadastro e analise o resultado na tela e tamb\u00e9m no menu administrativo do Django. Efetue tamb\u00e9m cadastro de dois usu\u00e1rios com mesmo nome e analise o resultado.</p> <p>OBS: O Django n\u00e3o armazena senhas brutas (texto n\u00e3o criptografado) no modelo de usu\u00e1rio. Ele armazena apenas um hash da senha.</p> <p>Para mais detalhes sobre a classe <code>User</code> consulte a documenta\u00e7\u00e3o oficial.</p>"},{"location":"aula-django-03/#melhorando-a-tela-de-login","title":"Melhorando a Tela de Login","text":"<p>Agora, iremos definir melhor a tela de Login.</p> <p>No arquivo <code>login.html</code> digite o seguinte:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block titulo %}\n    Portal Biblioteca - Login\n{% endblock %}\n\n{% block conteudo %}\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Login&lt;/h1&gt;\n        &lt;center&gt;\n        &lt;form action=\"{% url 'login' %}\" method=\"POST\"&gt;\n            {% csrf_token %}\n            Usu\u00e1rio: &lt;input type=\"text\" placeholder=\"Usu\u00e1rio ...\" name=\"usuario\"&gt;\n            &lt;br&gt;\n            &lt;br&gt;\n            Senha: &lt;input type=\"password\" placeholder=\"Senha ...\" name=\"senha\"&gt;\n            &lt;br&gt;\n            &lt;br&gt;\n            &lt;input type=\"submit\" value=\"Logar\"&gt;\n        &lt;/form&gt;\n        &lt;/center&gt;\n    &lt;/div&gt;\n{% endblock %}\n</code></pre> <p>Em seguida, atualize o c\u00f3digo do m\u00e9todo <code>login</code> na <code>view.py</code>.</p> <pre><code>from django.contrib.auth import authenticate\n...\ndef login(request): #atualize essa fun\u00e7\u00e3o\n    if request.method == \"GET\":\n        return render(request, 'login.html')\n    else:\n        usuario = request.POST.get('usuario')\n        senha = request.POST.get('senha')\n        user = authenticate(username=usuario, password=senha)\n        if user:\n            return HttpResponse('Autenticado')\n        else:\n            return HttpResponse('Usuario ou Senha inv\u00e1lidos')\n</code></pre> <p>Agora, acesse o servidor e efetue um login e analise o resultado na tela. Tente colocar um usu\u00e1rio v\u00e1lido e um usu\u00e1rio inv\u00e1lido.</p> <p>Em seguida, atualize o c\u00f3digo do m\u00e9todo cadastro na <code>view.py</code>.</p> <pre><code>from django.contrib.auth import login as login_django #importe tamb\u00e9m o login\n\n...\ndef login(request):\n    if request.method == \"GET\":\n        return render(request, 'login.html')\n    else:\n        usuario = request.POST.get('usuario')\n        senha = request.POST.get('senha')\n\n        user = authenticate(username=usuario, password=senha)\n        if user:\n            login_django(request, user) # linha adicionada\n            return HttpResponse('Autenticado')\n        else:\n            return HttpResponse('Usuario ou Senha inv\u00e1lidos')\n</code></pre> <p>Agora, acesse o servidor e efetue um login e analise o resultado na tela. Tente colocar um usu\u00e1rio v\u00e1lido e um usu\u00e1rio inv\u00e1lido. Neste ponto ainda n\u00e3o d\u00e1 para ver muita diferen\u00e7a entre os dois \u00fatlimos passos.</p> <p>Explica\u00e7\u00e3o: As principais diferen\u00e7as entre \"authenticate\" e \"login\" do django s\u00e3o destacadas a seguir:</p> <p>authenticate: * O m\u00e9todo \"authenticate\" \u00e9 uma fun\u00e7\u00e3o fornecida pelo Django que \u00e9 usada para verificar as credenciais de um usu\u00e1rio em um sistema de autentica\u00e7\u00e3o. * Ele recebe as informa\u00e7\u00f5es de login do usu\u00e1rio, como nome de usu\u00e1rio e senha, e verifica se essas informa\u00e7\u00f5es correspondem a um usu\u00e1rio registrado no sistema. * Se as credenciais estiverem corretas, o m\u00e9todo \"authenticate\" retornar\u00e1 um objeto de usu\u00e1rio v\u00e1lido que representa o usu\u00e1rio autenticado. Caso contr\u00e1rio, retornar\u00e1 \"None\".</p> <p>login: * O m\u00e9todo \"login\" refere-se ao processo de estabelecer uma sess\u00e3o de usu\u00e1rio autenticada em um aplicativo da web ap\u00f3s a autentica\u00e7\u00e3o bem-sucedida. * O Django fornece uma fun\u00e7\u00e3o chamada \"login\" que permite que voc\u00ea associe um objeto de usu\u00e1rio autenticado a uma sess\u00e3o. Isso \u00e9 importante para manter o estado de autentica\u00e7\u00e3o do usu\u00e1rio durante a sess\u00e3o. * A fun\u00e7\u00e3o \"login\" normalmente \u00e9 usada ap\u00f3s o usu\u00e1rio ser autenticado com sucesso usando o \"authenticate\".</p>"},{"location":"aula-django-03/#dashboard-disponivel-apenas-para-usuarios-logados","title":"Dashboard Dispon\u00edvel Apenas para Usu\u00e1rios Logados","text":"<p>Agora, iremos permitir que a visualiza\u00e7\u00e3o dos dashboards esteja dispon\u00edvel apenas se o usu\u00e1rio estiver logado na plataforma.</p> <p>Dessa maneira, atualize o c\u00f3digo da fun\u00e7\u00e3o dashboard em <code>view.py</code> da pasta <code>biblioteca</code> para o seguinte.</p> <pre><code>...\ndef dashboard(request):\n    if request.user.is_authenticated:\n        template = loader.get_template('dashboard.html')\n        return HttpResponse(template.render())\n    return HttpResponse(\"Voc\u00ea precisa estar logado!\")\n</code></pre> <p>Em seguida, abra uma guia an\u00f4nima do navegador e tente acessar a tela de dashboard. Na sequ\u00eancia, fa\u00e7a login na plataforma e ent\u00e3o tente acessar o dashboard.</p> <p>Uma outra forma de fazer a mesma opera\u00e7\u00e3o \u00e9 utilizando o decorador <code>login_required</code>. Atualize o seu c\u00f3digo da fun\u00e7\u00e3o dashborad em <code>view.py</code> da pasta <code>biblioteca</code> para o seguinte.</p> <pre><code>from django.contrib.auth.decorators import login_required\n...\n@login_required(login_url=\"/auth/login\")\ndef dashboard(request):\n    template = loader.get_template('dashboard.html')\n    return HttpResponse(template.render())\n</code></pre> <p>Em seguida, abra uma guia an\u00f4nima do navegador e tente acessar a tela de dashboard. Perceba que portal redireciona para a tela de login, isso ocorre, pois colocamos isso no par\u00e2metro <code>login_url</code>. Na sequ\u00eancia, fa\u00e7a login na plataforma e ent\u00e3o tente acessar o dashboard.</p>"},{"location":"aula-django-03/#adicionando-botao-de-logout-no-sistema","title":"Adicionando Bot\u00e3o de Logout no Sistema","text":"<p>Agora, iremos adicionar no nosso sistema um bot\u00e3o para efetuar o logout.</p> <p>Para isso, v\u00e1 no arquivo <code>base.html</code> na pasta <code>templates</code> na pasta <code>biblioteca</code>. E edite o HTML adicionando as linhas destacadas.</p> <pre><code>...\n            &lt;a href=\"/auth/cadastro\"&gt;CADASTRE-SE&lt;/a&gt; |\n            &lt;a href=\"/auth/logout\"&gt;LOGOUT&lt;/a&gt;\n...\n</code></pre> <p>Em seguida, v\u00e1 no arquivo <code>urls.py</code> da pasta <code>usuarios</code> e adicione a seguinte rota.</p> <pre><code>...\n    path('logout', views.logout, name='logout'),\n...\n</code></pre> <p>Em seguida, v\u00e1 no arquivo <code>views.py</code> da pasta <code>\u00f9suarios</code> e adicione o seguinte conte\u00fado:</p> <pre><code>from django.contrib.auth import logout as logout_django\n...\n\ndef logout(request):\n    logout_django(request)\n    return HttpResponse('Usuario deslogado do sistema!')\n</code></pre> <p>Explica\u00e7\u00e3o: Quando voc\u00ea chama <code>logout()</code> do django ou <code>logout_django()</code> neste caso, os dados da sess\u00e3o da solicita\u00e7\u00e3o atual s\u00e3o completamente limpos. Todos os dados existentes s\u00e3o removidos. Isso evita que outra pessoa use o mesmo navegador para fazer login e ter acesso aos dados da sess\u00e3o do usu\u00e1rio anterior.</p> <p>Em seguida, acesse o sistema, fa\u00e7a logout, tente acessar a p\u00e1gina de dashboard, fa\u00e7a login, tente acessar a p\u00e1gina de dashboard. Analise as mensagens impressas.</p>"},{"location":"aula-django-03/#adicionando-bootstrap-no-sistema","title":"Adicionando Bootstrap no Sistema","text":"<p>Neste passo, iremos melhorar a apar\u00eancia do nosso sistema utilizando o framework Bootstrap. Caso tenha d\u00favidas em como funciona o Bootstrap consulte a documenta\u00e7\u00e3o oficial ou o curso da w3schools.</p> <p>Para incorporar o bootstrap no nosso sistema primeiro, atualize o arquivo <code>base.html</code> da pasta <code>biblioteca</code> e subpasta <code>templates</code> conforme c\u00f3digo abaixo:</p> <pre><code>{% load static %}\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"{% static 'mystyles.css' %}\"&gt; \n        &lt;title&gt;{% block titulo %}{% endblock %}&lt;/title&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;  \n        &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"topnav\"&gt;\n            &lt;a href=\"/\"&gt;PRINCIPAL&lt;/a&gt; |\n            &lt;a href=\"/livros\"&gt;LIVROS&lt;/a&gt; |\n            &lt;a href=\"/tccs\"&gt;TCCs&lt;/a&gt; |\n            &lt;a href=\"/dashboard\"&gt;DASHBOARD&lt;/a&gt; |\n            &lt;a href=\"/auth/login\"&gt;LOGIN&lt;/a&gt; |\n            &lt;a href=\"/auth/cadastro\"&gt;CADASTRE-SE&lt;/a&gt; |\n            &lt;a href=\"/auth/logout\"&gt;LOGOUT&lt;/a&gt;\n        &lt;/div&gt;\n        {% block conteudo %}\n        {% endblock %}\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Em seguida, atualize o arquivo <code>login.html</code> da pasta <code>usuario</code> e subpasta <code>templates</code>.</p> <pre><code>...\n&lt;form action=\"{% url 'login' %}\" method=\"POST\"&gt;\n    {% csrf_token %}\n    &lt;div class=\"input-group\"&gt;\n        &lt;span class=\"input-group-text\"&gt;Usu\u00e1rio: &lt;/span&gt;\n        &lt;input type=\"text\" class=\"form-control\" placeholder=\"Usu\u00e1rio ...\" name=\"usuario\"&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;div class=\"input-group\"&gt;\n        &lt;span class=\"input-group-text\"&gt;Senha: &lt;/span&gt;\n        &lt;input type=\"password\" class=\"form-control\" placeholder=\"Senha ...\" name=\"senha\"&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;input type=\"submit\" value=\"Logar\" class=\"btn btn-primary\"&gt;\n&lt;/form&gt;\n...\n</code></pre> <p>Em seguida, atualize o arquivo <code>cadastro.html</code> da pasta <code>usuario</code> e subpasta <code>templates</code>.</p> <pre><code>...\n&lt;form action=\"{% url 'cadastro' %}\" method=\"POST\"&gt;\n    {% csrf_token %}\n    &lt;div class=\"input-group\"&gt;\n        &lt;span class=\"input-group-text\"&gt;Usu\u00e1rio: &lt;/span&gt;\n        &lt;input type=\"text\" class=\"form-control\" placeholder=\"Usu\u00e1rio ...\" name=\"usuario\"&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;div class=\"input-group\"&gt;\n        &lt;span class=\"input-group-text\"&gt;E-mail: &lt;/span&gt;\n        &lt;input type=\"email\" class=\"form-control\" placeholder=\"E-mail ...\" name=\"email\"&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;div class=\"input-group\"&gt;\n        &lt;span class=\"input-group-text\"&gt;Senha: &lt;/span&gt;\n        &lt;input type=\"password\" class=\"form-control\" placeholder=\"Senha ...\" name=\"senha\"&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;input type=\"submit\" value=\"Cadastrar\" class=\"btn btn-primary\"&gt;        \n&lt;/form&gt;\n...\n</code></pre> <p>Em seguida, acesse a aplica\u00e7\u00e3o no navegador e an\u00e1lise a nova interface do sistema nas telas de login e cadastro.</p>"},{"location":"aula-django-03/#adicionando-no-dashboard-informacao-do-usuario-logado","title":"Adicionando no Dashboard Informa\u00e7\u00e3o do Usu\u00e1rio Logado","text":"<p>Nessa etapa desejamos adicionar informa\u00e7\u00f5es do usu\u00e1rio logado na tela do dashboard.</p> <p>Primeiramente, iremos atualizar o m\u00e9todo dashboard no arquivo <code>views.py</code> da pasta <code>biblioteca</code>.</p> <pre><code>@login_required(login_url=\"/auth/login\")\ndef dashboard(request):\n    template = loader.get_template('dashboard.html')\n    # Voc\u00ea pode acessar o usu\u00e1rio logado atrav\u00e9s de request.user\n    user = request.user\n    # Agora voc\u00ea pode fazer qualquer coisa com o objeto 'user', como acessar seus campos, por exemplo:\n    username = user.username\n    email = user.email\n    context = {\n        'usuario': username,\n        'email': email,\n    }\n    return HttpResponse(template.render(context, request))\n</code></pre> <p>Em seguida, \u00e9 necess\u00e1rio atualizar tamb\u00e9m o arquivo <code>dashboard.html</code> da <code>biblioteca</code> e subpasta <code>templates</code>.</p> <pre><code>{% extends \"base.html\" %}\n\n{% load static %}\n\n{% block titulo %}\n    Portal Biblioteca - Dashboard\n{% endblock %}\n\n{% block conteudo %}\n    &lt;!-- In\u00edcio do bloco de c\u00f3digo adicionado --&gt;\n    &lt;center&gt;\n    &lt;br&gt;\n    &lt;div class=\"card\" style=\"width:240px\"&gt;\n        &lt;img class=\"card-img-top\" src=\"{% static 'img_avatar.png' %}\" alt=\"Imagem do card\"&gt;\n        &lt;div class=\"card-body\"&gt;\n          &lt;h4 class=\"card-title\"&gt; {{ usuario }} &lt;/h4&gt;\n          &lt;p class=\"card-text\"&gt;Email: {{ email }} &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/center&gt;\n    &lt;!-- Fim do bloco de c\u00f3digo adicionado --&gt;\n\n    &lt;div class=\"mycard\"&gt;\n        &lt;h1&gt;Dashboard&lt;/h1&gt;\n        &lt;div&gt;\n            &lt;canvas id=\"graficoNumVolumes\"&gt;&lt;/canvas&gt;\n        &lt;/div&gt;\n        &lt;br&gt;\n        &lt;br&gt;\n        &lt;div&gt;\n            &lt;canvas id=\"graficoPizza\"&gt;&lt;/canvas&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static 'myscripts.js' %}\"&gt;&lt;/script&gt;\n{% endblock %}\n</code></pre> <p>Em seguida, \u00e9 necess\u00e1rio copiar o arquivo <code>img_avatar.png</code> da pasta <code>docs</code> para a pasta <code>staticfiles</code>.</p> <p>Em seguida, execute o seguinte comando abaixo:</p> <pre><code>(venv) ... $ python3 manage.py collectstatic\n</code></pre> <p>Em seguida, reinicie o servidor:</p> <pre><code>(venv) ... $ python3 manage.py runserver\n</code></pre> <p>Analise a p\u00e1gina de dashboard com diferentes us\u00e1rios logados no sistema.</p>"},{"location":"aula-django-03/#algumas-informacoes-adicionais","title":"Algumas Informa\u00e7\u00f5es Adicionais","text":"<p>Caso queira ver o que foi feito no BD, basta digitar o comando abaixo com o n\u00famero da migra\u00e7\u00e3o:</p> <pre><code>(venv) ... $ python3 manage.py sqlmigrate biblioteca 0001\n</code></pre> <p>Obs: no comando acima <code>biblioteca</code> representa o nome da nossa aplica\u00e7\u00e3o web e o n\u00famero 0001 \u00e9 o n\u00famero da migra\u00e7\u00e3o.</p> <p>A sa\u00edda desse comando \u00e9 algo parecido com:</p> <pre><code>BEGIN;\n--\n-- Create model Livro\n--\nCREATE TABLE \"biblioteca_livro\" (\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT, \"nome\" varchar(255) NOT NULL, \"autor\" varchar(255) NOT NULL, \"ano\" integer NOT NULL);\nCOMMIT;\n</code></pre> <p>Para vermos com detalhes o conte\u00fado do BD podemos utilizar a ferramenta DB Browser for SQLite. Assim, basta abrir o arquivo do BD chamado <code>db.sqlite3</code> que est\u00e1 na raiz do projeto.</p>"}]}